{
    "name": "n8n Workflow Template Extractor",
    "nodes": [
        {
            "parameters": {},
            "name": "Start",
            "type": "n8n-nodes-base.start",
            "typeVersion": 1,
            "position": [-20, 280],
            "id": "23a85b96-73d8-444a-a9f9-3d0739f67a21"
        },
        {
            "parameters": {
                "jsCode": "const maxPages = 200; // Assuming there are less than 200 pages of workflows\nconst items = [];\nfor (let i = 1; i <= maxPages; i++) {\n  items.push({ json: { page: i } });\n}\nreturn items;"
            },
            "name": "Generate Page Numbers",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [200, 280],
            "id": "e9a0d1b3-c1c2-4f8a-a5f1-01b2c3d4e5f6"
        },
        {
            "parameters": {
                "url": "https://n8n.io/workflows?page={{ $json.page }}"
            },
            "name": "Get Workflow List Page",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.1,
            "position": [440, 280],
            "id": "060d268d-8a56-4c4e-b8d4-ebda7c1a8bd3",
            "notes": "Fetches the main workflows page from n8n.io which lists all the community templates."
        },
        {
            "parameters": {
                "sourceData": "html",
                "extractionValues": [
                    {
                        "key": "workflowUrl",
                        "cssSelector": "a.workflow-card_link-block",
                        "returnValue": "attribute",
                        "attribute": "href"
                    },
                    {
                        "key": "category",
                        "cssSelector": ".workflow-card_category-tag_text",
                        "returnValue": "text"
                    },
                    {
                        "key": "title",
                        "cssSelector": "h3.workflow-card_title",
                        "returnValue": "text"
                    }
                ]
            },
            "name": "Extract URLs & Categories",
            "type": "n8n-nodes-base.htmlExtract",
            "typeVersion": 1,
            "position": [680, 280],
            "id": "766579b7-023a-4934-8c88-12c5b369f649",
            "notes": "Parses the HTML from the previous step to extract the individual URL, category, and title for each workflow template on the page."
        },
        {
            "parameters": {
                "url": "={{ $json.workflowUrl }}"
            },
            "name": "Get Individual Template Page",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.1,
            "position": [920, 280],
            "id": "c138676d-09aa-403d-8686-2a6285493c04",
            "notes": "For each extracted URL, this node visits that specific workflow's page to get its detailed HTML content."
        },
        {
            "parameters": {
                "sourceData": "html",
                "extractionValues": [
                    {
                        "key": "workflowJsonString",
                        "cssSelector": "script#__NEXT_DATA__",
                        "returnValue": "text"
                    }
                ]
            },
            "name": "Extract Workflow JSON",
            "type": "n8n-nodes-base.htmlExtract",
            "typeVersion": 1,
            "position": [1160, 280],
            "id": "2280d90d-2949-41d1-966e-c852924151fa",
            "notes": "On the individual workflow page, the full workflow is stored as a JSON string inside a <script> tag. This node extracts that string content."
        },
        {
            "parameters": {
                "jsCode": "const item = $input.item;\nconst json = item.json;\n\n// Guard against missing data from the HTML extractor\n// If the script tag wasn't found, filter out this item by returning null.\nif (!json.workflowJsonString) {\n  return null;\n}\n\ntry {\n  const pageData = JSON.parse(json.workflowJsonString);\n\n  // Guard against changes in the website's JSON structure using optional chaining.\n  // If the expected nested object doesn't exist, filter out the item.\n  const workflowJson = pageData?.props?.pageProps?.workflow;\n  if (!workflowJson) {\n    return null;\n  }\n\n  // If we got here, the data is good. Proceed with file prep.\n  const title = json.title;\n  const sanitizedFilename = title.replace(/[^a-z0-9_ -]/gi, '_').replace(/\\s+/g, '-').toLowerCase();\n\n  const category = (json.category || 'uncategorized').replace(/[^a-z0-9_ -]/gi, '_').replace(/\\s+/g, '-').toLowerCase();\n\n  json.filePath = `n8n-wf-extractor/${category}/${sanitizedFilename}.json`;\n  json.fileContent = JSON.stringify(workflowJson, null, 2);\n\n  return item;\n\n} catch (error) {\n  // If JSON parsing fails, the data is malformed. Filter out the item.\n  // You can add logging here if you want to know which item failed.\n  // console.log(`Could not parse JSON for item: ${json.title}`);\n  return null;\n}"
            },
            "name": "Prepare File for Saving",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [1400, 280],
            "id": "9cc78e58-f7d1-4d0f-a92c-02cf4c3bb1b5",
            "notes": "This code block does three things:\n1. Parses the JSON string from the previous step to isolate the actual workflow data.\n2. Cleans up the workflow title and category to create safe file and folder names.\n3. Sets up the final `filePath` and the `fileContent` that will be saved in the next step.\n\n**This version includes robust error handling to skip items that can't be parsed, preventing the workflow from failing.**"
        },
        {
            "parameters": {
                "fileSelector": "={{ $json.filePath }}",
                "dataPropertyName": "fileContent",
                "options": {
                    "createDirectories": true
                }
            },
            "name": "Save Workflow JSON to File",
            "type": "n8n-nodes-base.writeBinaryFile",
            "typeVersion": 1.1,
            "position": [1640, 280],
            "id": "5893d56d-e407-4286-9a3d-a773722a7f5a",
            "notes": "Writes the extracted workflow JSON to a file. \n\n- The file path and name are dynamically set by the previous Code node.\n- It uses the content from the `fileContent` property.\n- The `Create Directories` option is enabled to automatically create the `n8n-wf-extractor` and category sub-folders as needed."
        }
    ],
    "connections": {
        "Start": {
            "main": [
                [
                    {
                        "node": "Generate Page Numbers",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Generate Page Numbers": {
            "main": [
                [
                    {
                        "node": "Get Workflow List Page",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Get Workflow List Page": {
            "main": [
                [
                    {
                        "node": "Extract URLs & Categories",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Extract URLs & Categories": {
            "main": [
                [
                    {
                        "node": "Get Individual Template Page",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Get Individual Template Page": {
            "main": [
                [
                    {
                        "node": "Extract Workflow JSON",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Extract Workflow JSON": {
            "main": [
                [
                    {
                        "node": "Prepare File for Saving",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Prepare File for Saving": {
            "main": [
                [
                    {
                        "node": "Save Workflow JSON to File",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "active": false,
    "settings": {
        "executionOrder": "v1"
    },
    "id": "jPZqK9dG3z4aX1wC",
    "meta": {
        "templateCredsSetupCompleted": true
    }
}
  