{
  "name": "Enhanced Production Scraper v2.0 - Testing Framework",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [140, 240],
      "id": "023adaeb-609d-4f77-951a-11546853899a",
      "name": "üöÄ Click to Start Test",
      "notes": "üöÄ Manual Trigger: Click this button to start the workflow execution manually. This is the entry point for the entire automation process."
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "test_session_id",
              "value": "={{ 'test_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9) }}"
            },
            {
              "name": "framework_version",
              "value": "testing-framework-v1.0"
            },
            {
              "name": "test_start_time",
              "value": "={{ new Date().toISOString() }}"
            }
          ],
          "boolean": [
            {
              "name": "comprehensive_logging",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [360, 240],
      "id": "test-session-init",
      "name": "üß™ Initialize Test Session",
      "notes": "üìù Data Setter: Configures test session metadata like timestamps, session IDs, and framework version for downstream nodes to track the test execution."
    },
    {
      "parameters": {
        "jsCode": "// ===== TESTING FRAMEWORK: COMPREHENSIVE CONSOLE LOGGING =====\nconst sessionData = $input.first().json;\nconst testSessionId = sessionData.test_session_id;\nconst startTime = Date.now();\n\nconsole.log('üß™ ===== N8N TESTING FRAMEWORK START =====');\nconsole.log(`üìã Test Session: ${testSessionId}`);\nconsole.log(`‚è∞ Start Time: ${new Date().toISOString()}`);\nconsole.log('üéØ Test Objective: Validate automated scraper workflow');\nconsole.log('üîß Framework Version: testing-framework-v1.0');\nconsole.log('');\n\n// Log system information\nconsole.log('üñ•Ô∏è  System Information:');\nconsole.log(`   User Agent: ${typeof navigator !== 'undefined' ? navigator.userAgent : 'n8n server'}`);\nconsole.log(`   Platform: ${typeof navigator !== 'undefined' ? navigator.platform : 'n8n server'}`);\nconsole.log(`   Environment: n8n workflow execution`);\nconsole.log('');\n\n// Initialize test tracking\nconst testResults = {\n  sessionId: testSessionId,\n  startTime: new Date().toISOString(),\n  steps: [],\n  errors: [],\n  performance: {},\n  success: false\n};\n\nconsole.log('‚úÖ Test session initialized successfully');\nconsole.log('üîÑ Proceeding to workflow execution...');\nconsole.log('');\n\nreturn [{ json: { \n  testSessionId, \n  testResults,\n  step: 'initialization',\n  status: 'completed',\n  timestamp: new Date().toISOString(),\n  executionTime: Date.now() - startTime\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [580, 240],
      "id": "test-logger-init",
      "name": "üìã Test Logger - Initialize",
      "notes": "‚öôÔ∏è JavaScript Code: Testing & Diagnostics - Provides detailed logging and validation for debugging workflow execution. Initializes comprehensive test tracking and system information logging."
    },
    {
      "parameters": {
        "url": "https://httpbin.org/html",
        "options": {
          "timeout": 30000,
          "headers": {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [800, 240],
      "id": "eed902c6-ebc4-4122-8afc-78f298aec549",
      "name": "üåê Fetch Test HTML",
      "notes": "üåê HTTP Request: Fetches data from https://httpbin.org/html. This is a scraping-friendly test site that returns predictable HTML content for testing purposes. Configured with proper headers, timeout settings, and error handling for reliable data retrieval."
    },
    {
      "parameters": {
        "jsCode": "// ===== FETCH VALIDATION & LOGGING =====\nlet loggerData, testSessionId;\n\ntry {\n  loggerData = $('üìã Test Logger - Initialize').first().json;\n  testSessionId = loggerData.testSessionId || `fallback_${Date.now()}`;\n} catch (error) {\n  console.log('‚ö†Ô∏è  Warning: Could not access Test Logger data, using fallback session ID');\n  testSessionId = `fallback_${Date.now()}`;\n  loggerData = { testSessionId };\n}\n\nconst stepStartTime = Date.now();\nconst httpResponse = $input.first().json || {};\n\nconsole.log('üåê ===== HTTP FETCH VALIDATION =====');\nconsole.log(`üìã Session: ${testSessionId}`);\nconsole.log(`üéØ Target URL: https://httpbin.org/html`);\nconsole.log(`üìä Response Analysis:`);\nconsole.log(`   Status Code: ${httpResponse.statusCode || 'UNKNOWN (Network Error)'}`);\nconsole.log(`   Response Size: ${JSON.stringify(httpResponse).length} characters`);\nconsole.log(`   Headers Present: ${httpResponse.headers ? 'YES' : 'NO'}`);\nconsole.log(`   Body Present: ${httpResponse.body ? 'YES' : 'NO'}`);\n\n// Enhanced response analysis with network error handling\nlet validationResults = {\n  statusCode: httpResponse.statusCode || 0,\n  isSuccess: httpResponse.statusCode === 200,\n  hasBody: !!httpResponse.body,\n  bodySize: httpResponse.body ? httpResponse.body.length : 0,\n  contentType: (httpResponse.headers && httpResponse.headers['content-type']) ? httpResponse.headers['content-type'] : 'unknown',\n  executionTime: Date.now() - stepStartTime,\n  networkError: !httpResponse.statusCode || httpResponse.statusCode === 0\n};\n\nconsole.log(`‚ö° Execution Time: ${validationResults.executionTime}ms`);\n\nif (validationResults.isSuccess) {\n  console.log('‚úÖ HTTP Request: SUCCESS');\n  console.log(`   Content Type: ${validationResults.contentType}`);\n  console.log(`   Body Size: ${validationResults.bodySize} characters`);\n} else if (validationResults.networkError) {\n  console.log('üö® HTTP Request: NETWORK ERROR');\n  console.log(`   Status: No response received (likely network/connectivity issue)`);\n  console.log(`   Troubleshooting: Check internet connection, DNS resolution, and firewall settings`);\n} else {\n  console.log('‚ùå HTTP Request: FAILED');\n  console.log(`   Error Details: Status ${validationResults.statusCode}`);\n  console.log(`   Troubleshooting: Check network connectivity and target site availability`);\n}\n\nconsole.log('');\n\n// Always return enriched data with testSessionId, even on network errors\nconst enrichedResponse = {\n  // Preserve original HTTP response data (may be empty on network error)\n  ...httpResponse,\n  // Always include our enriched metadata\n  testSessionId,\n  step: 'http_fetch',\n  validationResults,\n  timestamp: new Date().toISOString(),\n  // Add error context for network issues\n  errorContext: validationResults.networkError ? {\n    type: 'network_error',\n    description: 'HTTP request failed - no response received',\n    possibleCauses: ['Network connectivity issue', 'DNS resolution failure', 'Firewall blocking', 'Target server unreachable']\n  } : null\n};\n\nconsole.log(`üìã Data Flow Check: testSessionId = ${enrichedResponse.testSessionId}`);\nconsole.log(`üîç Validation Results: isSuccess = ${validationResults.isSuccess}`);\n\nreturn [{ json: enrichedResponse }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1020, 240],
      "id": "http-validator",
      "name": "üîç HTTP Response Validator",
      "notes": "‚öôÔ∏è JavaScript Code: Data Validation - Checks HTTP response quality, completeness, and format compliance. Provides comprehensive error analysis and network diagnostics for troubleshooting connection issues."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "7e2c4e8b-1a2b-4c5d-8e9f-1a2b3c4d5e6f",
              "leftValue": "={{ $json.validationResults.isSuccess }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1240, 240],
      "id": "05f65cb2-a6dd-4bad-95ad-1f4473bcf096",
      "name": "‚úÖ Validate Response",
      "notes": "‚úÖ Conditional Logic: Evaluates HTTP response conditions to determine workflow path. Routes successful responses to data processing and errors to diagnostic handling."
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "h1",
              "returnValue": "text"
            },
            {
              "key": "description",
              "cssSelector": "p",
              "returnValue": "text"
            },
            {
              "key": "links",
              "cssSelector": "a",
              "returnValue": "attribute",
              "attribute": "href"
            }
          ]
        },
        "options": {
          "trimValues": true
        }
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [1460, 140],
      "id": "1005b7b0-9a8e-4453-85cf-05e795b2385d",
      "name": "üîç Extract HTML Data",
      "notes": "üîç HTML Parser: Extracts specific data from HTML content using CSS selectors. Configured to find titles, paragraphs, and links from the test HTML page for validation purposes."
    },
    {
      "parameters": {
        "jsCode": "// ===== DATA EXTRACTION VALIDATION & LOGGING =====\nconst httpValidatorData = $('üîç HTTP Response Validator').first().json;\nconst testSessionId = httpValidatorData.testSessionId;\nconst stepStartTime = Date.now();\nconst extractedData = $input.all();\n\nconsole.log('üîç ===== DATA EXTRACTION VALIDATION =====');\nconsole.log(`üìã Session: ${testSessionId}`);\nconsole.log(`üìä Extraction Results:`);\nconsole.log(`   Total Items: ${extractedData.length}`);\n\n// Analyze extraction quality\nlet extractionStats = {\n  totalItems: extractedData.length,\n  validItems: 0,\n  invalidItems: 0,\n  fieldCompleteness: {\n    title: 0,\n    description: 0,\n    links: 0\n  },\n  executionTime: 0\n};\n\n// Detailed analysis of each extracted item\nfor (const item of extractedData) {\n  const data = item.json;\n  \n  if (data.title || data.description || data.links) {\n    extractionStats.validItems++;\n  } else {\n    extractionStats.invalidItems++;\n  }\n  \n  // Count field completeness\n  if (data.title) extractionStats.fieldCompleteness.title++;\n  if (data.description) extractionStats.fieldCompleteness.description++;\n  if (data.links) extractionStats.fieldCompleteness.links++;\n}\n\nextractionStats.executionTime = Date.now() - stepStartTime;\n\nconsole.log(`   Valid Items: ${extractionStats.validItems}`);\nconsole.log(`   Invalid Items: ${extractionStats.invalidItems}`);\nconsole.log(`   Success Rate: ${extractionStats.totalItems > 0 ? ((extractionStats.validItems / extractionStats.totalItems) * 100).toFixed(2) : 0}%`);\nconsole.log(`‚ö° Execution Time: ${extractionStats.executionTime}ms`);\n\nconsole.log('üìà Field Completeness:');\nfor (const [field, count] of Object.entries(extractionStats.fieldCompleteness)) {\n  const percentage = extractionStats.totalItems > 0 ? ((count / extractionStats.totalItems) * 100).toFixed(1) : 0;\n  console.log(`   ${field}: ${count}/${extractionStats.totalItems} (${percentage}%)`);\n}\n\nif (extractionStats.validItems === 0) {\n  console.log('‚ùå EXTRACTION FAILED: No valid items extracted');\n  console.log('üîß Troubleshooting:');\n  console.log('   - Check CSS selectors for changes in website structure');\n  console.log('   - Verify target website is accessible');\n  console.log('   - Review HTML extraction configuration');\n} else {\n  console.log('‚úÖ EXTRACTION SUCCESS: Valid data extracted');\n}\n\nconsole.log('');\n\n// Enhance data with test metadata\nconst enhancedData = extractedData.map((item, index) => ({\n  json: {\n    ...item.json,\n    testSessionId,\n    extractionIndex: index,\n    extractionStats,\n    timestamp: new Date().toISOString()\n  }\n}));\n\nreturn enhancedData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 140],
      "id": "extraction-validator",
      "name": "üìä Extraction Validator",
      "notes": "‚öôÔ∏è JavaScript Code: Data Validation - Analyzes extracted HTML data for quality, completeness, and success rates. Provides detailed statistics and troubleshooting guidance for extraction optimization."
    },
    {
      "parameters": {
        "jsCode": "// Enhanced workflow processing with comprehensive testing validation\nconst extractionData = $('üìä Extraction Validator').first().json;\nconst testSessionId = extractionData.testSessionId;\nconst stepStartTime = Date.now();\nconst items = $input.all();\nconst processedItems = [];\nconst errors = [];\nconst stats = { total: 0, valid: 0, invalid: 0, duplicates: 0 };\nconst seenContent = new Set();\n\nconsole.log('‚öôÔ∏è ===== DATA PROCESSING & ENHANCEMENT =====');\nconsole.log(`üìã Session: ${testSessionId}`);\nconsole.log(`üéØ Processing ${items.length} extracted items`);\n\nfor (const item of items) {\n  const data = item.json;\n  stats.total++;\n  \n  try {\n    // Validate required fields\n    if (!data.title && !data.description && !data.links) {\n      stats.invalid++;\n      errors.push({ reason: 'No extractable content found', data: { title: data.title, description: data.description, links: data.links } });\n      console.log(`‚ùå Invalid Item ${stats.total}: No extractable content`);\n      continue;\n    }\n    \n    // Create content signature for duplicate detection\n    const contentSignature = `${data.title || ''}_${data.description || ''}_${data.links || ''}`;\n    \n    // Check for duplicates\n    if (seenContent.has(contentSignature)) {\n      stats.duplicates++;\n      console.log(`‚ö†Ô∏è  Duplicate content detected`);\n      continue;\n    }\n    seenContent.add(contentSignature);\n    \n    // Enhanced data structure\n    const processedItem = {\n      // Core data\n      title: data.title ? data.title.trim() : 'No title',\n      description: data.description ? data.description.trim() : 'No description',\n      links: data.links || 'No links',\n      \n      // Test metadata\n      testSessionId,\n      extractedAt: new Date().toISOString(),\n      source: 'httpbin.org',\n      processingId: `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      \n      // Quality indicators\n      hasTitle: !!data.title,\n      hasDescription: !!data.description,\n      hasLinks: !!data.links,\n      estimatedQuality: (\n        (data.title ? 2 : 0) +\n        (data.description ? 2 : 0) +\n        (data.links ? 1 : 0)\n      )\n    };\n    \n    processedItems.push({ json: processedItem });\n    stats.valid++;\n    \n    console.log(`‚úÖ Processed Item ${stats.valid}: ${processedItem.title.substring(0, 50)}...`);\n    \n  } catch (error) {\n    stats.invalid++;\n    errors.push({ reason: error.message, data });\n    console.log(`‚ùå Processing Error ${stats.invalid}: ${error.message}`);\n  }\n}\n\nconst processingTime = Date.now() - stepStartTime;\nconst successRate = stats.total > 0 ? ((stats.valid / stats.total) * 100).toFixed(2) : 0;\n\nconsole.log(`üìä Processing Summary:`);\nconsole.log(`   Total Items: ${stats.total}`);\nconsole.log(`   Valid Items: ${stats.valid}`);\nconsole.log(`   Invalid Items: ${stats.invalid}`);\nconsole.log(`   Duplicates: ${stats.duplicates}`);\nconsole.log(`   Success Rate: ${successRate}%`);\nconsole.log(`‚ö° Processing Time: ${processingTime}ms`);\n\nif (errors.length > 0) {\n  console.log(`‚ö†Ô∏è  Errors Encountered:`);\n  errors.forEach((error, index) => {\n    console.log(`   ${index + 1}. ${error.reason}`);\n  });\n}\n\nconsole.log('');\n\n// Add processing summary\nprocessedItems.push({\n  json: {\n    _processingStats: stats,\n    _errors: errors,\n    _timestamp: new Date().toISOString(),\n    _type: 'processing_summary',\n    _testSessionId: testSessionId,\n    _processingTime: processingTime,\n    _successRate: successRate\n  }\n});\n\nconsole.log(`‚úÖ Data processing completed: ${stats.valid}/${stats.total} valid items`);\nreturn processedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1900, 140],
      "id": "f9796297-2b3c-4823-8386-ac5082ac8b48",
      "name": "‚öôÔ∏è Process & Enhance Data",
      "notes": "‚öôÔ∏è JavaScript Code: Data Processing - Filters, cleans, and transforms extracted data for downstream use. Handles duplicate detection, data validation, and quality scoring with comprehensive error tracking."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "not-summary",
              "leftValue": "={{ $json._type }}",
              "rightValue": "processing_summary",
              "operator": {
                "type": "string",
                "operation": "notEqual"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2120, 140],
      "id": "6bf27b10-b953-4a7d-a9c6-8196cfa9cd77",
      "name": "üîÑ Filter Data Items",
      "notes": "‚úÖ Conditional Logic: Filters out processing summary metadata to keep only actual data items. Routes clean data to batch processing while excluding internal statistics."
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [2340, 140],
      "id": "16a8212f-f300-4fab-a7ee-7d7065739890",
      "name": "üì¶ Batch Processing",
      "notes": "üì¶ Batch Processor: Splits large datasets into manageable chunks of 5 items for efficient processing and memory management during final result compilation."
    },
    {
      "parameters": {
        "jsCode": "// ===== LEARNING COLLECTION SYSTEM INTEGRATION =====\nconst loggerData = $('üìã Test Logger - Initialize').first().json;\nconst testSessionId = loggerData.testSessionId;\nconst finalData = $input.all();\nconst testStartTime = new Date(loggerData.timestamp);\nconst totalTestTime = Date.now() - testStartTime.getTime();\n\n// ===== SYSTEMATIC LEARNING COLLECTION =====\nconst learningData = {\n  sessionId: testSessionId,\n  timestamp: new Date().toISOString(),\n  workflowName: 'Enhanced Production Scraper',\n  workflowVersion: '2.0',\n  frameworkVersion: 'testing-framework-v1.0',\n  \n  // Performance Metrics\n  performance: {\n    totalExecutionTime: totalTestTime,\n    finalDataCount: finalData.length,\n    successRate: finalData.length > 0 ? 1.0 : 0.0,\n    dataExtractionEfficiency: finalData.length > 3 ? 'EXCELLENT' : finalData.length > 0 ? 'GOOD' : 'POOR'\n  },\n  \n  // Learning Insights\n  insights: [\n    {\n      type: 'automation_success',\n      category: 'workflow_execution',\n      description: `Workflow executed with ${finalData.length} items extracted from httpbin.org test site`,\n      confidence: finalData.length > 0 ? 0.9 : 0.1,\n      impact: finalData.length > 3 ? 'high' : 'medium'\n    }\n  ],\n  \n  // Pattern Recognition\n  patterns: {\n    execution_pattern: 'full_automation',\n    data_extraction_pattern: finalData.length > 0 ? 'successful' : 'failed',\n    node_connectivity: 'all_connected',\n    parameter_automation: 'fully_automated',\n    target_site: 'scraping_friendly'\n  },\n  \n  // Improvement Suggestions\n  improvements: finalData.length === 0 ? [\n    {\n      id: 'data_extraction_improvement',\n      title: 'Improve Data Extraction',\n      description: 'No data was extracted - review CSS selectors and target site',\n      priority: 'high',\n      autoApplicable: true\n    }\n  ] : [\n    {\n      id: 'optimization_opportunity',\n      title: 'Scale to Production Sites',\n      description: 'Test successful - ready to adapt for production scraping targets',\n      priority: 'medium',\n      autoApplicable: false\n    }\n  ],\n  \n  // Raw Data for Analysis\n  rawTestData: {\n    extractedItems: finalData.length,\n    executionSteps: [\n      'http_request', 'response_validation', 'data_extraction', \n      'validation', 'processing', 'filtering', 'batching', 'results'\n    ],\n    stepStatuses: {\n      http_request: 'success',\n      response_validation: 'success', \n      data_extraction: finalData.length > 0 ? 'success' : 'partial',\n      processing: 'success',\n      results: finalData.length > 0 ? 'success' : 'limited'\n    }\n  }\n};\n\n// ===== CONSOLE OUTPUT FOR LEARNING DATA =====\nconsole.log('');\nconsole.log('üéØ ===== SYSTEMATIC LEARNING FRAMEWORK =====');\nconsole.log('üìö Learning Data: Collected and structured');\nconsole.log('üîç Pattern Recognition: Analyzing workflow execution');\nconsole.log('üí° Improvement Suggestions: Generated based on performance');\nconsole.log('üîÑ Continuous Learning: Each run improves the system');\nconsole.log('');\nconsole.log('üìä LEARNING DATA (Copy this JSON):');\nconsole.log(JSON.stringify(learningData, null, 2));\nconsole.log('');\nconsole.log('üìã NEXT STEPS FOR LEARNING FRAMEWORK:');\nconsole.log('1. üìù Copy the learning data JSON above');\nconsole.log('2. ü§ñ Share with AI assistant for systematic analysis');\nconsole.log('3. üîß Apply improvements based on data-driven insights');\nconsole.log('4. üìä Track progress across multiple test iterations');\nconsole.log('');\nconsole.log('üéâ LEARNING FRAMEWORK STATUS: ACTIVE & COLLECTING DATA');\n\n// ===== TEST SUMMARY =====\nconst testSummary = {\n  sessionId: testSessionId,\n  status: finalData.length > 0 ? 'SUCCESS' : 'PARTIAL_SUCCESS',\n  completionTimestamp: new Date().toISOString(),\n  frameworkVersion: 'testing-framework-v1.0',\n  learningCollected: true,\n  dataCount: finalData.length,\n  executionTime: totalTestTime,\n  successRate: finalData.length > 0 ? 100 : 0\n};\n\nif (finalData.length > 0) {\n  console.log('‚úÖ ===== TEST EXECUTION: SUCCESS =====');\n  console.log(`üéâ Workflow completed successfully with ${finalData.length} items!`);\n  console.log('‚ú® All automation systems working correctly');\n} else {\n  console.log('‚ö†Ô∏è  ===== TEST EXECUTION: PARTIAL SUCCESS =====');\n  console.log('üîß Workflow executed but no data extracted');\n  console.log('üìã Learning data still collected for improvement analysis');\n}\n\nreturn [{ json: {\n  learningData,\n  testSummary,\n  nextSteps: [\n    'Copy learning data JSON from console',\n    'Share with AI assistant for analysis', \n    'Apply systematic improvements',\n    'Run next test iteration'\n  ]\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2560, 140],
      "id": "test-results-analyzer",
      "name": "üéØ Final Test Results",
      "notes": "‚öôÔ∏è JavaScript Code: Learning System - Collects patterns and insights for continuous workflow improvement. Analyzes execution performance and generates actionable recommendations for future iterations."
    },
    {
      "parameters": {
        "jsCode": "// ===== ERROR HANDLING & DIAGNOSTIC REPORTING =====\nconst enrichedResponse = $input.first().json;\nconst testSessionId = enrichedResponse.testSessionId || 'unknown';\nconst validationResults = enrichedResponse.validationResults || {};\nconst stepStartTime = Date.now();\n\nconsole.log('‚ùå ===== ERROR HANDLING ACTIVATED =====');\nconsole.log(`üìã Session: ${testSessionId}`);\nconsole.log(`üö® HTTP Request Failed`);\nconsole.log(`üìä Error Details:`);\nconsole.log(`   Status Code: ${enrichedResponse.statusCode || validationResults.statusCode || 'UNKNOWN'}`);\nconsole.log(`   Content Type: ${validationResults.contentType || 'unknown'}`);\nconsole.log(`   Response Size: ${validationResults.bodySize || 0} characters`);\nconsole.log(`   Has Body: ${validationResults.hasBody ? 'YES' : 'NO'}`);\nconsole.log(`   URL: ${enrichedResponse.url || 'https://httpbin.org/html'}`);\nconsole.log(`   Execution Time: ${validationResults.executionTime || 0}ms`);\n\n// Enhanced error analysis using validation results\nconst statusCode = enrichedResponse.statusCode || validationResults.statusCode || 0;\nconst errorAnalysis = {\n  statusCode: statusCode,\n  category: getErrorCategory(statusCode),\n  severity: getErrorSeverity(statusCode),\n  recommendations: getRecommendations(statusCode),\n  validationContext: {\n    hasValidationData: !!validationResults,\n    responseSize: validationResults.bodySize || 0,\n    contentType: validationResults.contentType || 'unknown',\n    executionTime: validationResults.executionTime || 0\n  }\n};\n\nconsole.log(`üîç Enhanced Error Analysis:`);\nconsole.log(`   Category: ${errorAnalysis.category}`);\nconsole.log(`   Severity: ${errorAnalysis.severity}`);\nconsole.log(`   Validation Data Available: ${errorAnalysis.validationContext.hasValidationData ? 'YES' : 'NO'}`);\nif (errorAnalysis.validationContext.hasValidationData) {\n  console.log(`   Response Analysis: ${errorAnalysis.validationContext.responseSize} chars, ${errorAnalysis.validationContext.contentType}`);\n}\n\nconsole.log(`üîß Recommended Actions:`);\nerrorAnalysis.recommendations.forEach((rec, index) => {\n  console.log(`   ${index + 1}. ${rec}`);\n});\n\n// Add specific troubleshooting based on validation context\nif (statusCode === 0 || !statusCode) {\n  console.log(`üö® CRITICAL: No HTTP status code detected`);\n  console.log(`   - Network connectivity issue`);\n  console.log(`   - DNS resolution failure`);\n  console.log(`   - Request timeout`);\n} else if (statusCode === 200 && validationResults.bodySize === 0) {\n  console.log(`‚ö†Ô∏è  WARNING: HTTP 200 but empty response body`);\n  console.log(`   - Website may have changed structure`);\n  console.log(`   - Content loaded via JavaScript (not accessible to scraper)`);\n}\n\nconst errorProcessingTime = Date.now() - stepStartTime;\n\nconsole.log('');\nconsole.log('‚ùå ===== TEST EXECUTION: FAILED =====');\nconsole.log('üö® Workflow terminated due to HTTP/validation error');\nconsole.log(`‚ö° Error Processing Time: ${errorProcessingTime}ms`);\nconsole.log('');\nconsole.log('üìã ===== COMPREHENSIVE ERROR FEEDBACK =====');\nconsole.log('üìù Copy ALL console logs above and share with the AI assistant');\nconsole.log('üîÑ This detailed error information will help improve error handling');\nconsole.log('üí° Next iteration will use this data for better validation and recovery');\nconsole.log('');\n\nfunction getErrorCategory(statusCode) {\n  if (statusCode >= 400 && statusCode < 500) return 'Client Error';\n  if (statusCode >= 500) return 'Server Error';\n  if (statusCode >= 300 && statusCode < 400) return 'Redirect Issue';\n  if (statusCode === 0) return 'Network Error';\n  return 'Unknown Error';\n}\n\nfunction getErrorSeverity(statusCode) {\n  if ([404, 403, 401].includes(statusCode)) return 'HIGH';\n  if ([500, 502, 503].includes(statusCode)) return 'CRITICAL';\n  if ([429, 408].includes(statusCode)) return 'MEDIUM';\n  if (statusCode === 0) return 'CRITICAL';\n  return 'MEDIUM';\n}\n\nfunction getRecommendations(statusCode) {\n  const recommendations = {\n    0: ['Check network connectivity', 'Verify DNS resolution', 'Check firewall settings', 'Increase request timeout'],\n    404: ['Check if the target URL is correct', 'Verify the website structure has not changed'],\n    403: ['Check if access is blocked', 'Consider using different headers or user agent'],\n    401: ['Authentication may be required', 'Check if login credentials are needed'],\n    429: ['Rate limiting detected', 'Add delays between requests', 'Consider using proxies'],\n    500: ['Server error on target website', 'Try again later', 'Check website status'],\n    502: ['Bad gateway error', 'Target server may be down', 'Check website availability'],\n    503: ['Service unavailable', 'Website may be under maintenance', 'Try again later']\n  };\n  \n  return recommendations[statusCode] || ['Unknown error', 'Check network connectivity', 'Review request configuration'];\n}\n\nreturn [{ json: {\n  errorAnalysis,\n  testSessionId,\n  status: 'FAILED',\n  errorTimestamp: new Date().toISOString(),\n  frameworkVersion: 'testing-framework-v1.0',\n  validationResults: validationResults,\n  processingTime: errorProcessingTime,\n  enrichedDataReceived: !!enrichedResponse.testSessionId\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1460, 340],
      "id": "error-diagnostic-handler",
      "name": "üö® Error Diagnostic Handler",
      "notes": "‚öôÔ∏è JavaScript Code: Error Handling - Provides comprehensive error analysis and recovery recommendations. Diagnoses network issues, HTTP errors, and provides actionable troubleshooting steps."
    }
  ],
  "pinData": {},
  "connections": {
    "üöÄ Click to Start Test": {
      "main": [
        [
          {
            "node": "üß™ Initialize Test Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß™ Initialize Test Session": {
      "main": [
        [
          {
            "node": "üìã Test Logger - Initialize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Test Logger - Initialize": {
      "main": [
        [
          {
            "node": "üåê Fetch Test HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Fetch Test HTML": {
      "main": [
        [
          {
            "node": "üîç HTTP Response Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç HTTP Response Validator": {
      "main": [
        [
          {
            "node": "‚úÖ Validate Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üö® Error Diagnostic Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Validate Response": {
      "main": [
        [
          {
            "node": "üîç Extract HTML Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extract HTML Data": {
      "main": [
        [
          {
            "node": "üìä Extraction Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Extraction Validator": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Process & Enhance Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Process & Enhance Data": {
      "main": [
        [
          {
            "node": "üîÑ Filter Data Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Filter Data Items": {
      "main": [
        [
          {
            "node": "üì¶ Batch Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì¶ Batch Processing": {
      "main": [
        [
          {
            "node": "üéØ Final Test Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "testing-framework-v1.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "enhanced-production-scraper-testing"
  },
  "id": "enhanced-testing-scraper",
  "tags": ["testing-framework", "comprehensive-logging", "diagnostics", "scraping-friendly"]
}