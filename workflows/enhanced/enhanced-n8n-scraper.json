{
  "name": "Enhanced N8N Workflow Scraper - Performance Optimized",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "url": "https://n8n.io/workflows/",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3,
            "retryDelay": 1000
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [200, 200],
      "id": "start-scraper",
      "name": "🚀 Initialize Scraper"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "status-check",
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": "200",
              "operator": {
                "type": "number",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [400, 200],
      "id": "validate-response",
      "name": "✅ Validate Response"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "workflowUrl",
              "cssSelector": "a.workflow-card_link-block, a[href*='/workflows/']",
              "returnValue": "attribute",
              "attribute": "href"
            },
            {
              "key": "title",
              "cssSelector": "h3.workflow-card_title, .workflow-title, h3"
            },
            {
              "key": "category",
              "cssSelector": ".workflow-card_category-tag_text, .category-tag, .tag"
            },
            {
              "key": "description",
              "cssSelector": ".workflow-card_description, .workflow-description, .description"
            },
            {
              "key": "author",
              "cssSelector": ".workflow-author, .author-name"
            },
            {
              "key": "tags",
              "cssSelector": ".workflow-tags .tag, .tags .tag"
            },
            {
              "key": "complexity",
              "cssSelector": ".complexity-indicator, .difficulty"
            }
          ]
        },
        "options": {
          "trimValues": true
        }
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [600, 200],
      "id": "extract-metadata",
      "name": "🔍 Extract Workflow Metadata"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced data processing with validation and enrichment\nconst items = $input.all();\nconst processedItems = [];\nconst errors = [];\nconst stats = { total: 0, valid: 0, invalid: 0, duplicates: 0 };\nconst seenUrls = new Set();\n\nfor (const item of items) {\n  const data = item.json;\n  stats.total++;\n  \n  try {\n    // Validate required fields\n    if (!data.workflowUrl || !data.title) {\n      stats.invalid++;\n      errors.push({ reason: 'Missing required fields', data });\n      continue;\n    }\n    \n    // Normalize and validate URL\n    let url = data.workflowUrl.trim();\n    if (url.startsWith('/')) {\n      url = 'https://n8n.io' + url;\n    }\n    \n    // Check for duplicates\n    if (seenUrls.has(url)) {\n      stats.duplicates++;\n      continue;\n    }\n    seenUrls.add(url);\n    \n    // Enhanced data structure\n    const processedItem = {\n      // Core data\n      url: url,\n      title: data.title.trim(),\n      category: data.category ? data.category.trim() : 'Uncategorized',\n      description: data.description ? data.description.trim() : '',\n      author: data.author ? data.author.trim() : 'Unknown',\n      \n      // Enhanced metadata\n      tags: data.tags ? data.tags.split(',').map(t => t.trim()).filter(Boolean) : [],\n      complexity: data.complexity || 'unknown',\n      \n      // Processing metadata\n      extractedAt: new Date().toISOString(),\n      source: 'n8n.io',\n      processingId: `scrape_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      \n      // Quality indicators\n      hasDescription: !!data.description,\n      hasAuthor: !!data.author,\n      estimatedQuality: (\n        (data.description ? 2 : 0) +\n        (data.author ? 1 : 0) +\n        (data.tags ? 1 : 0) +\n        (data.category && data.category !== 'Uncategorized' ? 1 : 0)\n      )\n    };\n    \n    processedItems.push({ json: processedItem });\n    stats.valid++;\n    \n  } catch (error) {\n    stats.invalid++;\n    errors.push({ reason: error.message, data });\n  }\n}\n\n// Add processing summary\nprocessedItems.push({\n  json: {\n    _processingStats: stats,\n    _errors: errors,\n    _timestamp: new Date().toISOString(),\n    _type: 'processing_summary'\n  }\n});\n\nconsole.log(`Processing complete: ${stats.valid}/${stats.total} valid items`);\nreturn processedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 200],
      "id": "process-data",
      "name": "⚡ Process & Enrich Data"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "not-summary",
              "leftValue": "={{ $json._type }}",
              "rightValue": "processing_summary",
              "operator": {
                "type": "string",
                "operation": "notEqual"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1000, 200],
      "id": "filter-data",
      "name": "🔄 Filter Data Items"
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {
          "continueOnFail": true
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1200, 200],
      "id": "batch-processor",
      "name": "📦 Batch for Parallel Processing"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "timeout": 15000,
          "retry": {
            "enabled": true,
            "maxRetries": 2,
            "retryDelay": 2000
          },
          "headers": {
            "User-Agent": "Mozilla/5.0 (compatible; n8n-scraper/1.0)",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1400, 200],
      "id": "fetch-workflows",
      "name": "🌐 Fetch Individual Workflows"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": "200",
              "operator": {
                "type": "number",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1600, 200],
      "id": "validate-fetch",
      "name": "✅ Validate Fetch Success"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "workflowJson",
              "cssSelector": "script[type='application/json']",
              "returnValue": "text"
            },
            {
              "key": "nodeCount",
              "cssSelector": ".node-count, .workflow-stats .nodes"
            },
            {
              "key": "connectionCount",
              "cssSelector": ".connection-count, .workflow-stats .connections"
            },
            {
              "key": "lastUpdated",
              "cssSelector": ".last-updated, .updated-date"
            },
            {
              "key": "downloadCount",
              "cssSelector": ".download-count, .usage-stats .downloads"
            }
          ]
        },
        "options": {
          "trimValues": true
        }
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [1800, 200],
      "id": "extract-workflow-details",
      "name": "📊 Extract Workflow Details"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced workflow analysis and validation\nconst items = $input.all();\nconst enhancedWorkflows = [];\nconst analysisErrors = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  try {\n    // Parse workflow JSON if available\n    let workflowData = null;\n    let nodeAnalysis = null;\n    \n    if (data.workflowJson) {\n      try {\n        workflowData = JSON.parse(data.workflowJson);\n        \n        // Analyze workflow structure\n        nodeAnalysis = {\n          totalNodes: workflowData.nodes ? workflowData.nodes.length : 0,\n          nodeTypes: workflowData.nodes ? [...new Set(workflowData.nodes.map(n => n.type))] : [],\n          hasWebhook: workflowData.nodes ? workflowData.nodes.some(n => n.type.includes('webhook')) : false,\n          hasSchedule: workflowData.nodes ? workflowData.nodes.some(n => n.type.includes('schedule')) : false,\n          complexity: calculateComplexity(workflowData)\n        };\n      } catch (parseError) {\n        analysisErrors.push({ url: data.url, error: 'JSON parse failed', details: parseError.message });\n      }\n    }\n    \n    // Enhanced workflow object\n    const enhancedWorkflow = {\n      ...data,\n      \n      // Workflow analysis\n      analysis: nodeAnalysis,\n      \n      // Enhanced metadata\n      nodeCount: parseInt(data.nodeCount) || (nodeAnalysis ? nodeAnalysis.totalNodes : 0),\n      connectionCount: parseInt(data.connectionCount) || 0,\n      downloadCount: parseInt(data.downloadCount) || 0,\n      \n      // Timestamps\n      lastUpdated: data.lastUpdated || null,\n      analyzedAt: new Date().toISOString(),\n      \n      // Quality scoring\n      qualityScore: calculateQualityScore(data, nodeAnalysis),\n      \n      // Classification\n      classification: classifyWorkflow(data, nodeAnalysis),\n      \n      // Raw workflow data (if available)\n      rawWorkflow: workflowData\n    };\n    \n    enhancedWorkflows.push({ json: enhancedWorkflow });\n    \n  } catch (error) {\n    analysisErrors.push({ url: data.url, error: 'Analysis failed', details: error.message });\n  }\n}\n\n// Helper functions\nfunction calculateComplexity(workflow) {\n  if (!workflow || !workflow.nodes) return 0;\n  \n  const nodeCount = workflow.nodes.length;\n  const connectionCount = workflow.connections ? Object.keys(workflow.connections).length : 0;\n  const uniqueNodeTypes = new Set(workflow.nodes.map(n => n.type)).size;\n  \n  // Simple complexity scoring\n  return Math.min(10, Math.floor(\n    (nodeCount * 0.3) + \n    (connectionCount * 0.4) + \n    (uniqueNodeTypes * 0.3)\n  ));\n}\n\nfunction calculateQualityScore(data, analysis) {\n  let score = 0;\n  \n  // Basic metadata quality\n  if (data.description && data.description.length > 20) score += 2;\n  if (data.author && data.author !== 'Unknown') score += 1;\n  if (data.category && data.category !== 'Uncategorized') score += 1;\n  \n  // Workflow analysis quality\n  if (analysis) {\n    if (analysis.totalNodes > 3) score += 2;\n    if (analysis.nodeTypes.length > 2) score += 1;\n    if (analysis.hasWebhook || analysis.hasSchedule) score += 1;\n  }\n  \n  // Usage indicators\n  if (data.downloadCount > 10) score += 1;\n  if (data.downloadCount > 100) score += 1;\n  \n  return Math.min(10, score);\n}\n\nfunction classifyWorkflow(data, analysis) {\n  const categories = [];\n  \n  // Basic classification\n  if (data.category) categories.push(data.category.toLowerCase());\n  \n  // Advanced classification based on analysis\n  if (analysis) {\n    if (analysis.hasWebhook) categories.push('webhook-triggered');\n    if (analysis.hasSchedule) categories.push('scheduled');\n    if (analysis.totalNodes > 10) categories.push('complex');\n    if (analysis.nodeTypes.some(type => type.includes('database'))) categories.push('database');\n    if (analysis.nodeTypes.some(type => type.includes('api'))) categories.push('api-integration');\n  }\n  \n  return categories;\n}\n\n// Add analysis summary\nenhancedWorkflows.push({\n  json: {\n    _analysisStats: {\n      totalProcessed: enhancedWorkflows.length,\n      errors: analysisErrors,\n      timestamp: new Date().toISOString()\n    },\n    _type: 'analysis_summary'\n  }\n});\n\nconsole.log(`Analysis complete: ${enhancedWorkflows.length - 1} workflows processed`);\nreturn enhancedWorkflows;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 200],
      "id": "analyze-workflows",
      "name": "🧠 Analyze & Enhance Workflows"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "not-summary",
              "leftValue": "={{ $json._type }}",
              "rightValue": "analysis_summary",
              "operator": {
                "type": "string",
                "operation": "notEqual"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2200, 200],
      "id": "filter-final",
      "name": "🔄 Filter Final Results"
    },
    {
      "parameters": {
        "fileName": "enhanced-n8n-workflows-{{ new Date().toISOString().split('T')[0] }}.json",
        "options": {
          "encoding": "utf8",
          "append": false
        }
      },
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [2400, 200],
      "id": "save-results",
      "name": "💾 Save Enhanced Results"
    },
    {
      "parameters": {
        "subject": "🎉 Enhanced N8N Workflow Extraction Complete",
        "message": "The enhanced n8n workflow scraping has completed successfully!\n\n📊 Processing Summary:\n- Workflows processed: {{ $('analyze-workflows').last().json._analysisStats.totalProcessed }}\n- Timestamp: {{ new Date().toISOString() }}\n- File saved: enhanced-n8n-workflows-{{ new Date().toISOString().split('T')[0] }}.json\n\n🚀 Enhanced features included:\n✅ Advanced metadata extraction\n✅ Workflow structure analysis\n✅ Quality scoring\n✅ Intelligent classification\n✅ Error handling and validation\n\nThe results are ready for analysis and integration into your n8n knowledge base!",
        "options": {
          "priority": "normal"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [2600, 200],
      "id": "send-success-notification",
      "name": "📧 Send Success Notification"
    },
    {
      "parameters": {
        "subject": "⚠️ N8N Scraper - Initial Request Failed",
        "message": "The initial request to n8n.io/workflows failed.\n\nError details:\n- Status: {{ $json.statusCode || 'Unknown' }}\n- Error: {{ $json.error || 'No error details' }}\n- Timestamp: {{ new Date().toISOString() }}\n\nPlease check:\n1. Network connectivity\n2. n8n.io website availability\n3. Rate limiting issues\n\nThe workflow will need to be restarted manually.",
        "options": {
          "priority": "high"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [400, 400],
      "id": "send-initial-error",
      "name": "🚨 Send Initial Error Alert"
    },
    {
      "parameters": {
        "subject": "⚠️ N8N Scraper - Partial Workflow Fetch Failures",
        "message": "Some individual workflow pages failed to load during scraping.\n\n📊 Status Summary:\n- Successfully processed: {{ $('batch-processor').item.json.batchSize || 'Unknown' }} workflows\n- Failed requests detected\n- Timestamp: {{ new Date().toISOString() }}\n\n🔍 Common causes:\n- Rate limiting\n- Temporary server issues\n- Network timeouts\n\nThe available data has been saved, but you may want to retry failed URLs manually.",
        "options": {
          "priority": "normal"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1600, 400],
      "id": "send-partial-error",
      "name": "⚠️ Send Partial Failure Warning"
    }
  ],
  "connections": {
    "start-scraper": {
      "main": [
        [
          {
            "node": "validate-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate-response": {
      "main": [
        [
          {
            "node": "extract-metadata",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "send-initial-error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract-metadata": {
      "main": [
        [
          {
            "node": "process-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-data": {
      "main": [
        [
          {
            "node": "filter-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter-data": {
      "main": [
        [
          {
          "node": "batch-processor",
          "type": "main",
          "index": 0
          }
        ]
      ]
    },
    "batch-processor": {
      "main": [
        [
          {
            "node": "fetch-workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch-workflows": {
      "main": [
        [
          {
            "node": "validate-fetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate-fetch": {
      "main": [
        [
          {
            "node": "extract-workflow-details",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "send-partial-error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract-workflow-details": {
      "main": [
        [
          {
            "node": "analyze-workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyze-workflows": {
      "main": [
        [
          {
            "node": "filter-final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter-final": {
      "main": [
        [
          {
            "node": "save-results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save-results": {
      "main": [
        [
          {
            "node": "send-success-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "id": "enhanced-n8n-scraper-v1",
  "tags": ["performance-optimized", "enhanced"]
} 