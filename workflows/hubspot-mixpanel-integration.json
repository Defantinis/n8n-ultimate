{
    "name": "My workflow 2",
    "nodes": [
      {
        "parameters": {},
        "id": "4518eb56-5ff9-4f05-9881-3e9f679d203c",
        "name": "Schedule Trigger",
        "type": "n8n-nodes-base.cron",
        "typeVersion": 1,
        "position": [
          -1000,
          60
        ]
      },
      {
        "parameters": {
          "authentication": "appToken",
          "resource": "contact",
          "operation": "getAll",
          "additionalFields": {
            "properties": [
              "email",
              "firstname",
              "lastname",
              "mixpanel_customer_id"
            ]
          }
        },
        "id": "0b954367-0d56-4661-b241-606719f08a46",
        "name": "HubSpot: Fetch Contacts",
        "type": "n8n-nodes-base.hubspot",
        "typeVersion": 1,
        "position": [
          -780,
          60
        ],
        "credentials": {
          "hubspotAppToken": {
            "id": "vfKljeOowtXMQOtI",
            "name": "HubSpot account"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.properties.mixpanel_customer_id }}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "71d26057-f079-43fa-811e-7113823eef30",
        "name": "Filter: Valid Customer IDs",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -560,
          60
        ]
      },
      {
        "parameters": {
          "jsCode": "// Transform HubSpot contacts for Mixpanel processing\nconst contacts = [];\n\nfor (const item of $input.all()) {\n  // Extract email value from HubSpot's nested structure\n  const emailValue = item.json.properties?.email?.value || item.json.properties?.email;\n  const firstnameValue = item.json.properties?.firstname?.value || item.json.properties?.firstname || '';\n  const lastnameValue = item.json.properties?.lastname?.value || item.json.properties?.lastname || '';\n  const lastModifiedValue = item.json.properties?.lastmodifieddate?.value || item.json.properties?.lastmodifieddate;\n  \n  const contact = {\n    hubspot_id: item.json.id || item.json['canonical-vid'] || item.json.vid,\n    customer_id: emailValue, // Use email as customer_id for Mixpanel integration\n    email: emailValue,\n    name: `${firstnameValue} ${lastnameValue}`.trim(),\n    current_page_views: item.json.properties?.mixpanel_page_views?.value || 0,\n    last_modified: lastModifiedValue\n  };\n  \n  // Validate required fields - only need valid email\n  if (contact.email && contact.email.includes('@')) {\n    contacts.push(contact);\n    console.log(`✅ Added contact: ${contact.name} (${contact.email})`);\n  } else {\n    console.log(`❌ Skipped contact: Missing or invalid email for ID ${contact.hubspot_id}`);\n  }\n}\n\nconsole.log(`Processing ${contacts.length} valid contacts out of ${$input.all().length} total`);\nreturn contacts.map(contact => ({ json: contact }));"
        },
        "id": "5d4931af-aa82-47ee-8e8a-28062a955cb3",
        "name": "Transform: Contact Data",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -340,
          -40
        ]
      },
      {
        "parameters": {
          "jsCode": "// Optimized auth test - only test once per batch instead of per contact\nconst items = $input.all();\nconst firstItem = items[0];\n\n// Test Mixpanel connection with a lightweight request\ntry {\n  const testResponse = await $http.request({\n    method: 'GET',\n    url: 'https://mixpanel.com/api/2.0/engage',\n    headers: {\n      'Authorization': 'Basic ' + Buffer.from(`${$credentials.httpBasicAuth}:`).toString('base64')\n    },\n    params: {\n      distinct_id: firstItem.json.customer_id,\n      limit: 1\n    }\n  });\n  \n  console.log('✅ Mixpanel authentication successful');\n  \n  // Return all items with auth confirmation\n  return items.map(item => ({\n    json: {\n      ...item.json,\n      mixpanel_auth_status: 'success',\n      auth_tested_at: new Date().toISOString()\n    }\n  }));\n  \n} catch (error) {\n  console.error('❌ Mixpanel authentication failed:', error.message);\n  \n  // Return items with error status\n  return items.map(item => ({\n    json: {\n      ...item.json,\n      mixpanel_auth_status: 'failed',\n      auth_error: error.message,\n      auth_tested_at: new Date().toISOString()\n    }\n  }));\n}"
        },
        "id": "35b564b7-84b0-4730-99c6-56c773a3a63b",
        "name": "Mixpanel: Test Auth",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -120,
          -40
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.mixpanel_auth_status }}",
                "operation": "equal",
                "value2": "success"
              }
            ]
          }
        },
        "id": "auth-validation-check",
        "name": "Validate Auth Success",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          80,
          -40
        ]
      },
      {
        "parameters": {
          "batchSize": 5,
          "options": {}
        },
        "id": "067b1059-7d56-41d0-8713-e97780e0f032",
        "name": "Split In Batches",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 1,
        "position": [
          260,
          -40
        ]
      },
      {
        "parameters": {
          "url": "https://mixpanel.com/api/2.0/export",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpBasicAuth",
          "sendQuery": true,
          "queryParameters": {
            "parameters": [
              {
                "name": "from_date",
                "value": "={{ $now.minus({days: 30}).toFormat('yyyy-MM-dd') }}"
              },
              {
                "name": "to_date",
                "value": "={{ $now.toFormat('yyyy-MM-dd') }}"
              },
              {
                "name": "event",
                "value": "[\"Page View\"]"
              },
              {
                "name": "where",
                "value": "={{ JSON.stringify({\"distinct_id\": $json.customer_id}) }}"
              }
            ]
          },
          "options": {}
        },
        "id": "a2e8a229-2ead-40cc-bd75-6b8a4dcf25f2",
        "name": "Mixpanel: Fetch Page Views",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          480,
          -40
        ],
        "credentials": {
          "httpBasicAuth": {
            "id": "GRbgePackzE8rwWp",
            "name": "Mixpanel"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Process Mixpanel events and calculate page view metrics\nconst results = [];\n\nfor (const item of $input.all()) {\n  const customer = item.json;\n  const mixpanelResponse = customer.mixpanel_response || item.json;\n  \n  let pageViews = 0;\n  let uniquePages = new Set();\n  let lastPageView = null;\n  \n  try {\n    // Handle different response formats\n    if (typeof mixpanelResponse === 'string') {\n      // Parse newline-delimited JSON\n      const events = mixpanelResponse.split('\\n')\n        .filter(line => line.trim())\n        .map(line => JSON.parse(line))\n        .filter(event => event.event === 'Page View');\n      \n      pageViews = events.length;\n      \n      events.forEach(event => {\n        if (event.properties && event.properties.page_url) {\n          uniquePages.add(event.properties.page_url);\n        }\n        \n        const eventTime = event.properties.time || event.properties.$time;\n        if (eventTime && (!lastPageView || eventTime > lastPageView)) {\n          lastPageView = eventTime;\n        }\n      });\n    } else if (Array.isArray(mixpanelResponse)) {\n      // Handle array response\n      const pageViewEvents = mixpanelResponse.filter(event => event.event === 'Page View');\n      pageViews = pageViewEvents.length;\n      \n      pageViewEvents.forEach(event => {\n        if (event.properties && event.properties.page_url) {\n          uniquePages.add(event.properties.page_url);\n        }\n        \n        const eventTime = event.properties.time || event.properties.$time;\n        if (eventTime && (!lastPageView || eventTime > lastPageView)) {\n          lastPageView = eventTime;\n        }\n      });\n    }\n    \n  } catch (error) {\n    console.error(`Error processing events for ${customer.customer_id}:`, error);\n    // Continue with default values\n  }\n  \n  results.push({\n    json: {\n      hubspot_id: customer.hubspot_id,\n      customer_id: customer.customer_id,\n      email: customer.email,\n      page_views_30d: pageViews,\n      unique_pages_30d: uniquePages.size,\n      last_page_view: lastPageView,\n      previous_page_views: customer.current_page_views || 0,\n      page_view_change: pageViews - (customer.current_page_views || 0),\n      processed_at: new Date().toISOString()\n    }\n  });\n}\n\nconsole.log(`Processed page view data for ${results.length} customers`);\nreturn results;"
        },
        "id": "43677bcf-72d5-4c92-86a3-cfee64a2326d",
        "name": "Process: Page View Data",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          700,
          -40
        ]
      },
      {
        "parameters": {
          "conditions": {
            "number": [
              {
                "value1": "={{ $json.page_view_change }}",
                "operation": "notEqual"
              }
            ]
          }
        },
        "id": "877dab79-a8b3-4ba9-beaf-1b0721d07dc7",
        "name": "Filter: Changed Metrics",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          920,
          -40
        ]
      },
      {
        "parameters": {
          "authentication": "appToken",
          "resource": "contact",
          "operation": "update"
        },
        "id": "ccafbc57-4c27-4c79-8c0d-06135c4950bc",
        "name": "HubSpot: Update Contact",
        "type": "n8n-nodes-base.hubspot",
        "typeVersion": 1,
        "position": [
          1140,
          -40
        ],
        "credentials": {
          "hubspotAppToken": {
            "id": "vfKljeOowtXMQOtI",
            "name": "HubSpot account"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Log successful updates and generate summary\nconst updates = $input.all();\nconst summary = {\n  total_contacts_processed: updates.length,\n  successful_updates: updates.filter(item => !item.json.error).length,\n  failed_updates: updates.filter(item => item.json.error).length,\n  total_page_views: updates.reduce((sum, item) => sum + (item.json.page_views_30d || 0), 0),\n  execution_time: new Date().toISOString()\n};\n\nconsole.log('🎉 HubSpot → Mixpanel Integration Summary:', JSON.stringify(summary, null, 2));\n\n// Log any errors\nupdates.filter(item => item.json.error).forEach(item => {\n  console.error(`❌ Failed to update contact ${item.json.customer_id}:`, item.json.error);\n});\n\nreturn [{ json: summary }];"
        },
        "id": "06b262b7-bbdd-4a9a-8434-9643b12b94b3",
        "name": "Log: Execution Summary",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1360,
          -40
        ]
      },
      {
        "parameters": {
          "jsCode": "// Handle and log errors from the workflow with enhanced error detection\nconst inputData = $input.first()?.json || {};\n\n// Determine specific error type based on data structure\nlet errorMessage = 'Unknown error';\nlet errorType = 'Workflow Error';\n\n// Check if this is a contact missing mixpanel_customer_id (from filter failure)\nif (inputData.properties && !inputData.properties.mixpanel_customer_id) {\n  errorMessage = 'Contact missing mixpanel_customer_id field - filtered out as expected';\n  errorType = 'Filter Exclusion';\n} \n// Check for authentication failures\nelse if (inputData.mixpanel_auth_status === 'failed' || inputData.auth_error) {\n  errorMessage = inputData.auth_error || 'Mixpanel authentication failed';\n  errorType = 'Authentication Failed';\n}\n// Check for other specific error types\nelse if (inputData.error?.message) {\n  errorMessage = inputData.error.message;\n  errorType = 'Node Error';\n}\n\nconst errorInfo = {\n  workflow_name: 'HubSpot → Mixpanel Integration',\n  error_time: new Date().toISOString(),\n  error_node: 'Error Handler',\n  error_message: errorMessage,\n  error_type: errorType,\n  contact_info: {\n    email: inputData.properties?.email?.value || inputData.email || 'N/A',\n    name: `${inputData.properties?.firstname?.value || ''} ${inputData.properties?.lastname?.value || ''}`.trim() || 'N/A',\n    hubspot_id: inputData.vid || inputData['canonical-vid'] || inputData.id || 'N/A'\n  },\n  input_data: inputData,\n  node_count: $input.all().length\n};\n\n// Enhanced logging based on error type\nif (errorType === 'Filter Exclusion') {\n  console.log(`ℹ️ Contact filtered out: ${errorInfo.contact_info.name} (${errorInfo.contact_info.email}) - missing mixpanel_customer_id field`);\n} else if (errorType === 'Authentication Failed') {\n  console.error('🔑 Authentication failure detected - check Mixpanel credentials');\n  console.error('❌ Workflow Error:', JSON.stringify(errorInfo, null, 2));\n} else {\n  console.error('⚠️ Workflow error detected');\n  console.error('❌ Workflow Error:', JSON.stringify(errorInfo, null, 2));\n}\n\nreturn [{ json: errorInfo }];"
        },
        "id": "c25d6eed-b2ab-4409-9afe-5a5db843cb84",
        "name": "Error Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -340,
          160
        ]
      }
    ],
    "pinData": {},
    "connections": {
      "Schedule Trigger": {
        "main": [
          [
            {
              "node": "HubSpot: Fetch Contacts",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HubSpot: Fetch Contacts": {
        "main": [
          [
            {
              "node": "Filter: Valid Customer IDs",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter: Valid Customer IDs": {
        "main": [
          [
            {
              "node": "Transform: Contact Data",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Error Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Transform: Contact Data": {
        "main": [
          [
            {
              "node": "Mixpanel: Test Auth",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Mixpanel: Test Auth": {
        "main": [
          [
            {
              "node": "Validate Auth Success",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Validate Auth Success": {
        "main": [
          [
            {
              "node": "Split In Batches",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Error Handler",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Split In Batches": {
        "main": [
          [
            {
              "node": "Mixpanel: Fetch Page Views",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Mixpanel: Fetch Page Views": {
        "main": [
          [
            {
              "node": "Process: Page View Data",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Process: Page View Data": {
        "main": [
          [
            {
              "node": "Filter: Changed Metrics",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter: Changed Metrics": {
        "main": [
          [
            {
              "node": "HubSpot: Update Contact",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "HubSpot: Update Contact": {
        "main": [
          [
            {
              "node": "Log: Execution Summary",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "dc37ff4a-d661-4246-92d8-35f31e084061",
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "b0d7e96a419793923052cce83491123b156aedf3b732f558d517d7aca045355d"
    },
    "id": "5fmPxnru4M68rnQq",
    "tags": []
  }