{
    "name": "HubSpot to Mixpanel Engagement Sync",
    "nodes": [
      {
        "parameters": {},
        "id": "4518eb56-5ff9-4f05-9881-3e9f679d203c",
        "name": "Schedule Trigger",
        "type": "n8n-nodes-base.cron",
        "typeVersion": 1,
        "position": [
          -1000,
          60
        ]
      },
      {
        "parameters": {
          "jsCode": "return {\n  json: {\n    daysToSync: 30,\n    batchSize: 100,\n    mixpanelEventName: 'Page View',\n    fromDate: $now.minus({ days: 30 }).toFormat('yyyy-MM-dd'),\n    toDate: $now.toFormat('yyyy-MM-dd')\n  }\n};"
        },
        "id": "config-node",
        "name": "Workflow Config",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -800,
          60
        ]
      },
      {
        "parameters": {
          "authentication": "appToken",
          "resource": "contact",
          "operation": "getAll",
          "additionalFields": {
            "properties": [
              "email",
              "firstname",
              "lastname",
              "mixpanel_customer_id"
            ]
          }
        },
        "id": "0b954367-0d56-4661-b241-606719f08a46",
        "name": "HubSpot: Fetch Contacts",
        "type": "n8n-nodes-base.hubspot",
        "typeVersion": 1,
        "position": [
          -780,
          60
        ],
        "credentials": {
          "hubspotAppToken": {
            "id": "={{$credentials.HubSpot_App}}",
            "name": "HubSpot App"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.properties.mixpanel_customer_id }}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "71d26057-f079-43fa-811e-7113823eef30",
        "name": "Filter: Valid Customer IDs",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -360,
          60
        ]
      },
      {
        "parameters": {
          "batchSize": "={{$node[\"Workflow Config\"].json.batchSize}}",
          "options": {
            "runOnce": true
          }
        },
        "id": "067b1059-7d56-41d0-8713-e97780e0f032",
        "name": "Split In Batches",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 1,
        "position": [
          460,
          -40
        ]
      },
      {
        "parameters": {
          "jsCode": "const items = $input.all();\nconst customerIds = items.map(item => item.json.customer_id).filter(id => id);\nreturn [{ json: { customer_ids: customerIds } }];"
        },
        "id": "Aggregate Contact IDs",
        "name": "Aggregate Contact IDs",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          660,
          -40
        ]
      },
      {
        "parameters": {
          "method": "GET",
          "url": "https://mixpanel.com/api/2.0/events",
          "authentication": "httpBasicAuth",
          "sendQuery": true,
          "queryParameters": [
            {
              "name": "distinct_id",
              "value": "={{ $json.customer_ids }}"
            },
            {
              "name": "from_date",
              "value": "={{ $node[\"Workflow Config\"].json.fromDate }}"
            },
            {
              "name": "to_date",
              "value": "={{ $node[\"Workflow Config\"].json.toDate }}"
            },
            {
              "name": "event",
              "value": "page view"
            }
          ],
          "options": {}
        },
        "id": "Mixpanel: Fetch Page Views",
        "name": "Mixpanel: Fetch Page Views",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 4.1,
        "position": [
          860,
          -40
        ],
        "credentials": {
          "httpBasicAuth": {
            "id": "Mixpanel_Credentials",
            "name": "Mixpanel Credentials"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "const items = $input.all();\nconst pageViewData = items.reduce((acc, item) => {\n  const id = item.json.properties.distinct_id;\n  if (!acc[id]) {\n    acc[id] = { page_views: 0 };\n  }\n  acc[id].page_views += 1;\n  return acc;\n}, {});\nreturn [{ json: pageViewData }];"
        },
        "id": "Process: Page View Data",
        "name": "Process: Page View Data",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1060,
          -40
        ]
      },
      {
        "parameters": {
          "resource": "contact",
          "operation": "updateBatch",
          "options": {
            "properties": [
              {
                "property": "mixpanel_page_views",
                "value": "={{ $json.page_views }}"
              }
            ]
          }
        },
        "id": "Update HubSpot Contacts",
        "name": "Update HubSpot Contacts",
        "type": "n8n-nodes-base.hubspot",
        "typeVersion": 4,
        "position": [
          1260,
          -40
        ]
      },
      {
        "parameters": {
          "jsCode": "// Log successful updates and generate summary\nconst updates = $input.all();\nconst summary = {\n  total_contacts_processed: updates.length,\n  successful_updates: updates.filter(item => !item.json.error).length,\n  failed_updates: updates.filter(item => item.json.error).length,\n  total_page_views: updates.reduce((sum, item) => sum + (item.json.page_views_30d || 0), 0),\n  execution_time: new Date().toISOString()\n};\n\nconsole.log('üéâ HubSpot ‚Üí Mixpanel Integration Summary:', JSON.stringify(summary, null, 2));\n\n// Log any errors\nupdates.filter(item => item.json.error).forEach(item => {\n  console.error(`‚ùå Failed to update contact ${item.json.customer_id}:`, item.json.error);\n});\n\nreturn [{ json: summary }];"
        },
        "id": "06b262b7-bbdd-4a9a-8434-9643b12b94b3",
        "name": "Log: Execution Summary",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1800,
          -220
        ]
      },
      {
        "parameters": {
          "jsCode": "// Handle and log errors from the workflow with enhanced error detection and context\nconst error = $input.first();\nconst inputData = error.json || {};\n\n// Determine specific error type based on data structure\nlet errorMessage = 'Unknown error occurred in the workflow.';\nlet errorType = 'GenericWorkflowError';\nlet suggestion = 'Check the workflow execution logs for details.';\n\n// Check for filter failure (no mixpanel_customer_id)\nif (inputData.properties && !inputData.properties.mixpanel_customer_id) {\n  errorMessage = `Contact with HubSpot ID ${inputData.id || inputData.vid} was filtered out as expected because the 'mixpanel_customer_id' field is empty.`;\n  errorType = 'FilterExclusion';\n  suggestion = 'This is usually normal. Ensure the contact has a `mixpanel_customer_id` in HubSpot if they should be processed.';\n} \n// Check for authentication failures from the dedicated test node\nelse if (inputData.mixpanel_auth_status === 'failed' || inputData.auth_error) {\n  errorMessage = inputData.auth_error || 'Mixpanel authentication failed during pre-flight check.';\n  errorType = 'AuthenticationFailed';\n  suggestion = 'Verify that your Mixpanel credentials are correct and have the necessary permissions.';\n}\n// Check for HTTP request failures\nelse if (inputData.error && inputData.error.code) {\n    errorMessage = `An API error occurred: ${inputData.error.message || 'No message'}. Status Code: ${inputData.error.code}`;\n    errorType = 'ApiError';\n    suggestion = `Check the API documentation for status code ${inputData.error.code} and review the request sent from the failing node.`\n}\n// Check for other code execution errors\nelse if (error.error) {\n  errorMessage = error.error.message;\n  errorType = 'NodeExecutionError';\n  suggestion = `A code error occurred in node '${error.execution.node.name}'. Check the node's code and input data.`;\n}\n\nconst errorInfo = {\n  workflow: {\n    name: 'HubSpot ‚Üí Mixpanel Integration',\n    id: '{{$workflow.id}}',\n    executionId: '{{$execution.id}}'\n  },\n  error: {\n    type: errorType,\n    message: errorMessage,\n    suggestion: suggestion,\n    timestamp: new Date().toISOString(),\n    node: error.execution ? {\n      name: error.execution.node.name,\n      type: error.execution.node.type,\n      id: error.execution.node.id\n    } : { name: 'Unknown' }\n  },\n  context: {\n      hubspotId: inputData.id || inputData.vid || 'N/A',\n      email: inputData.properties?.email || inputData.email || 'N/A'\n  },\n  fullError: error\n};\n\n// More readable console output\nconsole.error(`\nüö® WORKFLOW ERROR: ${errorInfo.error.type}\\n--------------------------------------------------\\n- Message: ${errorInfo.error.message}\\n- Suggestion: ${errorInfo.error.suggestion}\\n- Node: ${errorInfo.error.node.name} (${errorInfo.error.node.type})\\n- HubSpot ID: ${errorInfo.context.hubspotId}\\n- Email: ${errorInfo.context.email}\\n- Timestamp: ${errorInfo.error.timestamp}\\n--------------------------------------------------\\n`);\n\nreturn [{ json: errorInfo }];"
        },
        "id": "c25d6eed-b2ab-4409-9afe-5a5db843cb84",
        "name": "Error Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -340,
          160
        ]
      }
    ],
    "pinData": {},
    "connections": {
      "Schedule Trigger": {
        "main": [[{"node": "Workflow Config", "type": "main", "index": 0}]]
      },
      "Workflow Config": {
        "main": [[{"node": "HubSpot: Fetch Contacts", "type": "main", "index": 0}]]
      },
      "HubSpot: Fetch Contacts": {
        "main": [[{"node": "Filter: Valid Customer IDs", "type": "main", "index": 0}]]
      },
      "Filter: Valid Customer IDs": {
        "main": [
          [{"node": "Split In Batches", "type": "main", "index": 0}],
          [{"node": "Error Handler", "type": "main", "index": 0}]
        ]
      },
      "Split In Batches": {
        "main": [
          [{"node": "Aggregate Contact IDs", "type": "main", "index": 0}]
        ]
      },
      "Aggregate Contact IDs": {
        "main": [[{"node": "Mixpanel: Fetch Page Views", "type": "main", "index": 0}]]
      },
      "Mixpanel: Fetch Page Views": {
        "main": [[{"node": "Process: Page View Data", "type": "main", "index": 0}]]
      },
      "Process: Page View Data": {
        "main": [[{"node": "Update HubSpot Contacts", "type": "main", "index": 0}]]
      },
      "Update HubSpot Contacts": {
        "main": [[{"node": "Log: Execution Summary", "type": "main", "index": 0}]]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "dc37ff4a-d661-4246-92d8-35f31e084061",
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "b0d7e96a419793923052cce83491123b156aedf3b732f558d517d7aca045355d"
    },
    "id": "5fmPxnru4M68rnQq",
    "tags": []
  }