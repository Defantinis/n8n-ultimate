{
  "meta": {
    "instanceId": "n8n-ultimate-hubspot-mixpanel"
  },
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 6
            }
          ]
        }
      },
      "id": "4518eb56-5ff9-4f05-9881-3e9f679d203c",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.schedule",
      "typeVersion": 1.1,
      "position": [
        260,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "config1",
              "name": "daysToSync",
              "value": 30,
              "type": "number"
            },
            {
              "id": "config2",
              "name": "batchSize",
              "value": 100,
              "type": "number"
            },
            {
              "id": "config3",
              "name": "mixpanelEventName",
              "value": "Page View",
              "type": "string"
            },
            {
              "id": "config4",
              "name": "fromDate",
              "value": "={{ $now.minus({ days: 30 }).toFormat('yyyy-MM-dd') }}",
              "type": "string"
            },
            {
              "id": "config5",
              "name": "toDate",
              "value": "={{ $now.toFormat('yyyy-MM-dd') }}",
              "type": "string"
            },
            {
              "id": "config6",
              "name": "retryAttempts",
              "value": 3,
              "type": "number"
            }
          ]
        }
      },
      "id": "config-node",
      "name": "Workflow Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "appToken",
        "resource": "contact",
        "operation": "getAll",
        "additionalFields": {
          "properties": [
            "email",
            "firstname",
            "lastname",
            "mixpanel_customer_id"
          ]
        }
      },
      "id": "0b954367-0d56-4661-b241-606719f08a46",
      "name": "HubSpot: Fetch Contacts",
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 1,
      "position": [
        660,
        300
      ],
      "credentials": {
        "hubspotAppToken": {
          "id": "HubSpot_App",
          "name": "HubSpot App"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.properties.mixpanel_customer_id }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "71d26057-f079-43fa-811e-7113823eef30",
      "name": "Filter: Valid Customer IDs",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        860,
        300
      ]
    },
    {
      "parameters": {
        "code": "// Aggregate customer IDs for batch processing\nconst items = $input.all();\nconst customerIds = items\n  .map(item => item.json.properties?.mixpanel_customer_id)\n  .filter(id => id && id.trim());\n\nif (customerIds.length === 0) {\n  return [{ json: { error: 'No valid customer IDs found' } }];\n}\n\nreturn [{ json: { customer_ids: customerIds, count: customerIds.length } }];"
      },
      "id": "Aggregate Contact IDs",
      "name": "Aggregate Contact IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://mixpanel.com/api/2.0/events",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBasicAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "distinct_id",
              "value": "={{ $json.customer_ids.join(',') }}"
            },
            {
              "name": "from_date",
              "value": "={{ $node['Workflow Config'].json.fromDate }}"
            },
            {
              "name": "to_date",
              "value": "={{ $node['Workflow Config'].json.toDate }}"
            },
            {
              "name": "event",
              "value": "page view"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "Mixpanel: Fetch Page Views",
      "name": "Mixpanel: Fetch Page Views",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1260,
        300
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "Mixpanel_Credentials",
          "name": "Mixpanel Credentials"
        }
      }
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "seconds"
      },
      "id": "Rate Limiter",
      "name": "Rate Limiter",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1460,
        300
      ]
    },
    {
      "parameters": {
        "code": "// Process page view data with error handling\ntry {\n  const items = $input.all();\n  \n  if (!items || items.length === 0) {\n    return [{ json: { error: 'No data received from Mixpanel' } }];\n  }\n  \n  const pageViewData = items.reduce((acc, item) => {\n    if (item.json?.properties?.distinct_id) {\n      const id = item.json.properties.distinct_id;\n      if (!acc[id]) {\n        acc[id] = { page_views: 0, last_seen: null };\n      }\n      acc[id].page_views += 1;\n      acc[id].last_seen = item.json.properties?.time || new Date().toISOString();\n    }\n    return acc;\n  }, {});\n  \n  const processedCount = Object.keys(pageViewData).length;\n  \n  return [{ \n    json: { \n      processed_data: pageViewData, \n      summary: { \n        total_customers: processedCount,\n        processed_at: new Date().toISOString()\n      }\n    } \n  }];\n} catch (error) {\n  return [{ json: { error: `Processing failed: ${error.message}` } }];\n}"
      },
      "id": "Process: Page View Data",
      "name": "Process: Page View Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1660,
        300
      ]
    },
    {
      "parameters": {
        "code": "// Enhanced AI-powered error handler with localhost:3000 integration\ntry {\n  const items = $input.all();\n  const errorData = items.filter(item => item.json.error);\n  \n  if (errorData.length === 0) {\n    return [{ json: { status: 'success', message: 'No errors detected' } }];\n  }\n  \n  // Log errors and attempt recovery\n  const errorSummary = {\n    timestamp: new Date().toISOString(),\n    errors: errorData.map(item => item.json.error),\n    recovery_attempt: 1,\n    ai_recommendation: 'Check API credentials and rate limits'\n  };\n  \n  // Optional: Call AI service for intelligent error analysis\n  // Can integrate with localhost:3000/api/ai for smart recommendations\n  \n  return [{ json: errorSummary }];\n} catch (error) {\n  return [{ json: { \n    fatal_error: error.message, \n    timestamp: new Date().toISOString(),\n    recommendation: 'Contact system administrator'\n  } }];\n}"
      },
      "id": "Enhanced AI Error Handler",
      "name": "Enhanced AI Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1860,
        400
      ]
    },
    {
      "parameters": {
        "code": "// Execution summary with comprehensive logging\nconst items = $input.all();\nconst summary = {\n  workflow_name: 'HubSpot to Mixpanel Engagement Sync',\n  execution_id: $execution.id,\n  timestamp: new Date().toISOString(),\n  total_items_processed: items.length,\n  success_count: items.filter(item => !item.json.error).length,\n  error_count: items.filter(item => item.json.error).length,\n  execution_time: `${Date.now() - $execution.startedAt}ms`,\n  next_scheduled_run: 'Every 6 hours',\n  ai_integration: 'Ready for localhost:3000/api/ai',\n  status: items.some(item => item.json.error) ? 'completed_with_errors' : 'success'\n};\n\nconsole.log('HubSpot-Mixpanel Sync Summary:', JSON.stringify(summary, null, 2));\n\nreturn [{ json: summary }];"
      },
      "id": "Log: Execution Summary",
      "name": "Log: Execution Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        300
      ]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Workflow Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Config": {
      "main": [
        [
          {
            "node": "HubSpot: Fetch Contacts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HubSpot: Fetch Contacts": {
      "main": [
        [
          {
            "node": "Filter: Valid Customer IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter: Valid Customer IDs": {
      "main": [
        [
          {
            "node": "Aggregate Contact IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Contact IDs": {
      "main": [
        [
          {
            "node": "Mixpanel: Fetch Page Views",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mixpanel: Fetch Page Views": {
      "main": [
        [
          {
            "node": "Rate Limiter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limiter": {
      "main": [
        [
          {
            "node": "Process: Page View Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process: Page View Data": {
      "main": [
        [
          {
            "node": "Log: Execution Summary",
            "type": "main",
            "index": 0
          },
          {
            "node": "Enhanced AI Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-06-23T07:18:00.000Z",
  "versionId": "1"
}