{
    "name": "HubSpot to Mixpanel Engagement Sync",
    "nodes": [
      {
        "parameters": {},
        "id": "4518eb56-5ff9-4f05-9881-3e9f679d203c",
        "name": "Schedule Trigger",
        "type": "n8n-nodes-base.cron",
        "typeVersion": 1,
        "position": [
          -1000,
          60
        ]
      },
      {
        "parameters": {
          "values": {
            "string": [
              {
                "name": "daysToSync",
                "value": "30"
              },
              {
                "name": "batchSize",
                "value": "100"
              },
              {
                "name": "mixpanelEventName",
                "value": "Page View"
              }
            ]
          },
          "options": {}
        },
        "id": "config-node",
        "name": "Workflow Config",
        "type": "n8n-nodes-base.set",
        "typeVersion": 1,
        "position": [
          -800,
          60
        ]
      },
      {
        "parameters": {
          "authentication": "appToken",
          "resource": "contact",
          "operation": "getAll",
          "additionalFields": {
            "properties": [
              "email",
              "firstname",
              "lastname",
              "mixpanel_customer_id"
            ]
          }
        },
        "id": "0b954367-0d56-4661-b241-606719f08a46",
        "name": "HubSpot: Fetch Contacts",
        "type": "n8n-nodes-base.hubspot",
        "typeVersion": 1,
        "position": [
          -780,
          60
        ],
        "credentials": {
          "hubspotAppToken": {
            "id": "={{$credentials.HubSpot_App}}",
            "name": "HubSpot App"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.properties.mixpanel_customer_id }}",
                "operation": "isNotEmpty"
              }
            ]
          }
        },
        "id": "71d26057-f079-43fa-811e-7113823eef30",
        "name": "Filter: Valid Customer IDs",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          -360,
          60
        ]
      },
      {
        "parameters": {
          "jsCode": "// More robustly transform HubSpot contacts for Mixpanel processing\nconst contacts = [];\n\nfor (const item of $input.all()) {\n  const json = item.json || {};\n  const properties = json.properties || {};\n\n  // Extract email value from HubSpot's nested structure with extra safety\n  const emailValue = properties.email?.value || properties.email || null;\n  const firstnameValue = properties.firstname?.value || properties.firstname || '';\n  const lastnameValue = properties.lastname?.value || properties.lastname || '';\n  const lastModifiedValue = properties.lastmodifieddate?.value || properties.lastmodifieddate;\n  \n  const contact = {\n    hubspot_id: json.id || json['canonical-vid'] || json.vid,\n    customer_id: emailValue, // Use email as customer_id for Mixpanel integration\n    email: emailValue,\n    name: `${firstnameValue} ${lastnameValue}`.trim(),\n    current_page_views: properties.mixpanel_page_views?.value ?? 0,\n    last_modified: lastModifiedValue\n  };\n  \n  // Validate required fields - only need valid email\n  if (contact.email && contact.email.includes('@')) {\n    contacts.push(contact);\n    // console.log(`✅ Added contact: ${contact.name} (${contact.email})`);\n  } else {\n    console.warn(`❌ Skipped contact: Missing or invalid email for HubSpot ID ${contact.hubspot_id}`);\n  }\n}\n\nconsole.log(`Processing ${contacts.length} valid contacts out of ${$input.all().length} total`);\nreturn contacts.map(contact => ({ json: contact }));"
        },
        "id": "5d4931af-aa82-47ee-8e8a-28062a955cb3",
        "name": "Transform: Contact Data",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -140,
          -40
        ]
      },
      {
        "parameters": {
          "jsCode": "// Optimized auth test - only test once per batch instead of per contact\\nconst items = $input.all();\\nconst firstItem = items[0];\\n\\n// Test Mixpanel connection with a lightweight request\\ntry {\\n  const credentials = await this.getCredentials('Mixpanel_Credentials');\\n  const apiKey = credentials.user; // Mixpanel API Secret is stored in the 'user' field for Basic Auth\\n  const encodedAuth = Buffer.from(`${apiKey}:`).toString('base64');\\n\\n  const testResponse = await $http.request({\\n    method: 'GET',\\n    url: 'https://mixpanel.com/api/2.0/engage',\\n    headers: {\\n      'Authorization': 'Basic ' + encodedAuth\\n    },\\n    params: {\\n      distinct_id: firstItem.json.customer_id,\\n      limit: 1\\n    }\\n  });\\n  \\n  console.log('✅ Mixpanel authentication successful');\\n  \\n  // Return all items with auth confirmation\\n  return items.map(item => ({\\n    json: {\\n      ...item.json,\\n      mixpanel_auth_status: 'success',\\n      auth_tested_at: new Date().toISOString()\\n    }\\n  }));\\n  \\n} catch (error) {\\n  console.error('❌ Mixpanel authentication failed:', error.message);\\n  \\n  // Return items with error status\\n  return items.map(item => ({\\n    json: {\\n      ...item.json,\\n      mixpanel_auth_status: 'failed',\\n      auth_error: error.message,\\n      auth_tested_at: new Date().toISOString()\\n    }\\n  }));\\n}"
        },
        "id": "35b564b7-84b0-4730-99c6-56c773a3a63b",
        "name": "Mixpanel: Test Auth",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          80,
          -40
        ]
      },
      {
        "parameters": {
          "conditions": {
            "string": [
              {
                "value1": "={{ $json.mixpanel_auth_status }}",
                "operation": "equal",
                "value2": "success"
              }
            ]
          }
        },
        "id": "auth-validation-check",
        "name": "Validate Auth Success",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          280,
          -40
        ]
      },
      {
        "parameters": {
          "batchSize": "={{$node[\"Workflow Config\"].json.batchSize}}",
          "options": {
            "runOnce": true
          }
        },
        "id": "067b1059-7d56-41d0-8713-e97780e0f032",
        "name": "Split In Batches",
        "type": "n8n-nodes-base.splitInBatches",
        "typeVersion": 1,
        "position": [
          460,
          -40
        ]
      },
      {
        "parameters": {
          "jsCode": "const batch = $input.all();\nconst customerIds = batch.map(item => item.json.customer_id);\n\n// Return the IDs for the API call and the original batch data for merging later\nreturn [{\n  json: {\n    customer_ids: customerIds,\n    original_batch: batch.map(item => item.json)\n  }\n}];"
        },
        "id": "aggregate-contact-ids",
        "name": "Aggregate Contact IDs",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          700,
          -220
        ]
      },
      {
        "parameters": {
          "url": "https://mixpanel.com/api/2.0/export",
          "authentication": "genericCredentialType",
          "genericAuthType": "httpBasicAuth",
          "sendQuery": true,
          "queryParameters": {
            "parameters": [
              {
                "name": "from_date",
                "value": "={{ $now.minus({days: $node[\"Workflow Config\"].json.daysToSync}).toFormat('yyyy-MM-dd') }}"
              },
              {
                "name": "to_date",
                "value": "={{ $now.toFormat('yyyy-MM-dd') }}"
              },
              {
                "name": "event",
                "value": "[\"{{$node[\"Workflow Config\"].json.mixpanelEventName}}\"]"
              },
              {
                "name": "where",
                "value": "={{ 'properties[\"$distinct_id\"] in ' + JSON.stringify($json.customer_ids) }}"
              }
            ]
          },
          "options": {
            "splitIntoItems": false
          }
        },
        "id": "a2e8a229-2ead-40cc-bd75-6b8a4dcf25f2",
        "name": "Mixpanel: Fetch Page Views",
        "type": "n8n-nodes-base.httpRequest",
        "typeVersion": 3,
        "position": [
          920,
          -220
        ],
        "credentials": {
          "httpBasicAuth": {
            "id": "={{$credentials.Mixpanel_Credentials}}",
            "name": "Mixpanel Credentials"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Process Mixpanel events for the entire batch and calculate page view metrics\nconst inputData = $input.first().json;\nconst originalBatch = inputData.original_batch;\nconst mixpanelResponse = inputData.body;\nconst eventName = $node[\"Workflow Config\"].json.mixpanelEventName || 'Page View';\n\nlet allEvents = [];\ntry {\n  if (typeof mixpanelResponse === 'string' && mixpanelResponse.trim()) {\n    allEvents = mixpanelResponse.split('\\n').filter(line => line.trim()).map(line => JSON.parse(line));\n  } else if (Array.isArray(mixpanelResponse)) {\n    allEvents = mixpanelResponse;\n  }\n} catch (error) {\n  console.error(`Error parsing Mixpanel response for the batch:`, error.message);\n}\n\n// Group events by distinct_id for efficient lookup\nconst eventsByCustomerId = allEvents.reduce((acc, event) => {\n  const distinctId = event.properties?.distinct_id;\n  if (distinctId) {\n    if (!acc[distinctId]) {\n      acc[distinctId] = [];\n    }\n    acc[distinctId].push(event);\n  }\n  return acc;\n}, {});\n\nconst results = [];\n\nfor (const customer of originalBatch) {\n  const customerId = customer.customer_id;\n  const customerEvents = eventsByCustomerId[customerId] || [];\n  \n  const pageViewEvents = customerEvents.filter(event => event.event === eventName);\n  const pageViews = pageViewEvents.length;\n  \n  const uniquePages = new Set();\n  let lastPageView = null;\n\n  pageViewEvents.forEach(event => {\n    const props = event.properties || {};\n    if (props.page_url) {\n      uniquePages.add(props.page_url);\n    }\n    const eventTime = props.time || props.$time;\n    if (eventTime && (!lastPageView || eventTime > lastPageView)) {\n      lastPageView = eventTime;\n    }\n  });\n\n  results.push({\n    hubspot_id: customer.hubspot_id,\n    customer_id: customerId,\n    email: customer.email,\n    page_views_30d: pageViews,\n    unique_pages_30d: uniquePages.size,\n    last_page_view: lastPageView,\n    previous_page_views: customer.current_page_views || 0,\n    page_view_change: pageViews - (customer.current_page_views || 0),\n    processed_at: new Date().toISOString()\n  });\n}\n\nconsole.log(`Processed page view data for ${results.length} customers in the batch`);\nreturn results.map(res => ({ json: res }));"
        },
        "id": "43677bcf-72d5-4c92-86a3-cfee64a2326d",
        "name": "Process: Page View Data",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1140,
          -220
        ]
      },
      {
        "parameters": {
          "conditions": {
            "number": [
              {
                "value1": "={{ $json.page_view_change }}",
                "operation": "notEqual"
              }
            ]
          }
        },
        "id": "877dab79-a8b3-4ba9-beaf-1b0721d07dc7",
        "name": "Filter: Changed Metrics",
        "type": "n8n-nodes-base.if",
        "typeVersion": 1,
        "position": [
          1360,
          -220
        ]
      },
      {
        "parameters": {
          "authentication": "appToken",
          "resource": "contact",
          "operation": "update"
        },
        "id": "ccafbc57-4c27-4c79-8c0d-06135c4950bc",
        "name": "HubSpot: Update Contact",
        "type": "n8n-nodes-base.hubspot",
        "typeVersion": 1,
        "position": [
          1580,
          -220
        ],
        "credentials": {
          "hubspotAppToken": {
            "id": "={{$credentials.HubSpot_App}}",
            "name": "HubSpot App"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Log successful updates and generate summary\nconst updates = $input.all();\nconst summary = {\n  total_contacts_processed: updates.length,\n  successful_updates: updates.filter(item => !item.json.error).length,\n  failed_updates: updates.filter(item => item.json.error).length,\n  total_page_views: updates.reduce((sum, item) => sum + (item.json.page_views_30d || 0), 0),\n  execution_time: new Date().toISOString()\n};\n\nconsole.log('🎉 HubSpot → Mixpanel Integration Summary:', JSON.stringify(summary, null, 2));\n\n// Log any errors\nupdates.filter(item => item.json.error).forEach(item => {\n  console.error(`❌ Failed to update contact ${item.json.customer_id}:`, item.json.error);\n});\n\nreturn [{ json: summary }];"
        },
        "id": "06b262b7-bbdd-4a9a-8434-9643b12b94b3",
        "name": "Log: Execution Summary",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          1800,
          -220
        ]
      },
      {
        "parameters": {
          "jsCode": "// Handle and log errors from the workflow with enhanced error detection and context\nconst error = $input.first();\nconst inputData = error.json || {};\n\n// Determine specific error type based on data structure\nlet errorMessage = 'Unknown error occurred in the workflow.';\nlet errorType = 'GenericWorkflowError';\nlet suggestion = 'Check the workflow execution logs for details.';\n\n// Check for filter failure (no mixpanel_customer_id)\nif (inputData.properties && !inputData.properties.mixpanel_customer_id) {\n  errorMessage = `Contact with HubSpot ID ${inputData.id || inputData.vid} was filtered out as expected because the 'mixpanel_customer_id' field is empty.`;\n  errorType = 'FilterExclusion';\n  suggestion = 'This is usually normal. Ensure the contact has a `mixpanel_customer_id` in HubSpot if they should be processed.';\n} \n// Check for authentication failures from the dedicated test node\nelse if (inputData.mixpanel_auth_status === 'failed' || inputData.auth_error) {\n  errorMessage = inputData.auth_error || 'Mixpanel authentication failed during pre-flight check.';\n  errorType = 'AuthenticationFailed';\n  suggestion = 'Verify that your Mixpanel credentials are correct and have the necessary permissions.';\n}\n// Check for HTTP request failures\nelse if (inputData.error && inputData.error.code) {\n    errorMessage = `An API error occurred: ${inputData.error.message || 'No message'}. Status Code: ${inputData.error.code}`;\n    errorType = 'ApiError';\n    suggestion = `Check the API documentation for status code ${inputData.error.code} and review the request sent from the failing node.`\n}\n// Check for other code execution errors\nelse if (error.error) {\n  errorMessage = error.error.message;\n  errorType = 'NodeExecutionError';\n  suggestion = `A code error occurred in node '${error.execution.node.name}'. Check the node's code and input data.`;\n}\n\nconst errorInfo = {\n  workflow: {\n    name: 'HubSpot → Mixpanel Integration',\n    id: '{{$workflow.id}}',\n    executionId: '{{$execution.id}}'\n  },\n  error: {\n    type: errorType,\n    message: errorMessage,\n    suggestion: suggestion,\n    timestamp: new Date().toISOString(),\n    node: error.execution ? {\n      name: error.execution.node.name,\n      type: error.execution.node.type,\n      id: error.execution.node.id\n    } : { name: 'Unknown' }\n  },\n  context: {\n      hubspotId: inputData.id || inputData.vid || 'N/A',\n      email: inputData.properties?.email || inputData.email || 'N/A'\n  },\n  fullError: error\n};\n\n// More readable console output\nconsole.error(`\n🚨 WORKFLOW ERROR: ${errorInfo.error.type}\\n--------------------------------------------------\\n- Message: ${errorInfo.error.message}\\n- Suggestion: ${errorInfo.error.suggestion}\\n- Node: ${errorInfo.error.node.name} (${errorInfo.error.node.type})\\n- HubSpot ID: ${errorInfo.context.hubspotId}\\n- Email: ${errorInfo.context.email}\\n- Timestamp: ${errorInfo.error.timestamp}\\n--------------------------------------------------\\n`);\n\nreturn [{ json: errorInfo }];"
        },
        "id": "c25d6eed-b2ab-4409-9afe-5a5db843cb84",
        "name": "Error Handler",
        "type": "n8n-nodes-base.code",
        "typeVersion": 1,
        "position": [
          -340,
          160
        ]
      }
    ],
    "pinData": {},
    "connections": {
      "Schedule Trigger": {
        "main": [[{"node": "Workflow Config", "type": "main", "index": 0}]]
      },
      "Workflow Config": {
        "main": [[{"node": "HubSpot: Fetch Contacts", "type": "main", "index": 0}]]
      },
      "HubSpot: Fetch Contacts": {
        "main": [[{"node": "Filter: Valid Customer IDs", "type": "main", "index": 0}]]
      },
      "Filter: Valid Customer IDs": {
        "main": [
          [{"node": "Transform: Contact Data", "type": "main", "index": 0}],
          [{"node": "Error Handler", "type": "main", "index": 0}]
        ]
      },
      "Transform: Contact Data": {
        "main": [[{"node": "Mixpanel: Test Auth", "type": "main", "index": 0}]]
      },
      "Mixpanel: Test Auth": {
        "main": [[{"node": "Validate Auth Success", "type": "main", "index": 0}]]
      },
      "Validate Auth Success": {
        "main": [
          [{"node": "Split In Batches", "type": "main", "index": 0}],
          [{"node": "Error Handler", "type": "main", "index": 0}]
        ]
      },
      "Split In Batches": {
        "main": [[{"node": "Aggregate Contact IDs", "type": "main", "index": 0}]]
      },
      "Aggregate Contact IDs": {
        "main": [[{"node": "Mixpanel: Fetch Page Views", "type": "main", "index": 0}]]
      },
      "Mixpanel: Fetch Page Views": {
        "main": [[{"node": "Process: Page View Data", "type": "main", "index": 0}]]
      },
      "Process: Page View Data": {
        "main": [[{"node": "Filter: Changed Metrics", "type": "main", "index": 0}]]
      },
      "Filter: Changed Metrics": {
        "main": [[{"node": "HubSpot: Update Contact", "type": "main", "index": 0}]]
      },
      "HubSpot: Update Contact": {
        "main": [[{"node": "Log: Execution Summary", "type": "main", "index": 0}]]
      }
    },
    "active": false,
    "settings": {
      "executionOrder": "v1"
    },
    "versionId": "dc37ff4a-d661-4246-92d8-35f31e084061",
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "b0d7e96a419793923052cce83491123b156aedf3b732f558d517d7aca045355d"
    },
    "id": "5fmPxnru4M68rnQq",
    "tags": []
  }