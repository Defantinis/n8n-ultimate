---
description: 
globs: 
alwaysApply: true
---
# n8n Ultimate Project Priorities

**CRITICAL**: This rule defines the immediate actions every AI agent must take when starting work on this project.

## **Immediate Session Startup Actions**

### **1. Project Context Recognition**
```bash
# REQUIRED: Understand project immediately
Project: n8n Ultimate - AI-powered workflow generation system
Phase: Phase 2 - User-friendly production experience (25% complete)
AI Models: PHI4 (main), DeepSeek R1 (research), Claude Sonnet (fallback)
Operation: Zero-cost using local Ollama models
```

### **2. Task Master Integration (MANDATORY)**
```bash
# STEP 1: Get current project status
mcp_task-master-ai_get_tasks

# STEP 2: Identify what to work on next
mcp_task-master-ai_next_task

# STEP 3: Load specific task context
mcp_task-master-ai_get_task --id=<current-task-id>
```

### **3. Knowledge Base Access**
- **Read**: [Execution Log for AI helper.txt](mdc:Execution Log for AI helper.txt) - Project history
- **Reference**: [AI_AGENT_COLLABORATION_GUIDE.md](mdc:docs/AI_AGENT_COLLABORATION_GUIDE.md) - Tool patterns
- **Reference**: [N8N_WORKFLOW_DEBUGGING.md](mdc:docs/N8N_WORKFLOW_DEBUGGING.md) - Debugging methodology

## **Core Priorities Hierarchy**

### **Priority 1: For Future AI Agents**
- **‚úÖ Systematic Approach**: Apply 5-phase methodology (IDENTIFY ‚Üí ISOLATE ‚Üí FIX ‚Üí VERIFY ‚Üí DOCUMENT)
- **‚úÖ Tool Integration**: Proper Task Master usage with comprehensive logging
- **‚úÖ Real Examples**: Reference actual fixes and established patterns
- **‚úÖ Quality Standards**: Comprehensive testing and documentation requirements

### **Priority 2: For Project Continuity**
- **‚úÖ Knowledge Base**: Comprehensive troubleshooting guide maintenance
- **‚úÖ Best Practices**: Established patterns for workflow development
- **‚úÖ Tool Usage**: Documented approach using our own systems
- **‚úÖ Collaboration Framework**: Clear AI-human interaction patterns

## **Non-Negotiable Standards**

### **Every Implementation Must Include:**
- [ ] **Task Master Integration**: Progress logged with timestamps
- [ ] **5-Phase Methodology**: Systematic approach applied
- [ ] **Error Handling**: Comprehensive error management
- [ ] **Testing Strategy**: Unit, integration, and end-to-end testing
- [ ] **Documentation Updates**: Both inline and external documentation
- [ ] **Pattern Consistency**: Follows established project patterns

### **Quality Gates (Never Skip):**
- [ ] **Functionality Verified**: Feature works as specified
- [ ] **Error Scenarios Tested**: Edge cases and failure modes handled
- [ ] **Documentation Complete**: Clear, actionable instructions provided
- [ ] **Progress Logged**: Task Master updated with findings
- [ ] **Rules Updated**: New patterns captured for future agents

## **Systematic Methodology (Apply to Everything)**

### **Phase 1: IDENTIFY**
- Load task context using Task Master
- Analyze existing codebase patterns
- Verify prerequisite tasks completed
- Define clear implementation scope

### **Phase 2: ISOLATE**
- Identify specific files/components to modify
- Recognize existing similar implementations
- Assess potential breaking changes
- Plan comprehensive testing strategy

### **Phase 3: FIX/IMPLEMENT**
- Start with smallest working change
- Follow established project patterns
- Include comprehensive error handling
- Update documentation inline

### **Phase 4: VERIFY**
- Test individual components
- Verify component interactions
- Execute end-to-end functionality
- Test error scenarios and edge cases

### **Phase 5: DOCUMENT**
- Update Task Master with detailed findings
- Update rules with new patterns discovered
- Update execution log with session summary
- Ensure future agents can understand decisions

## **n8n Workflow Specific Priorities**

### **Critical Success Factors:**
- **Node Connection Methodology**: ALWAYS use node IDs, never names in connections
- **Code Node Return Format**: MUST return `[{ json: {...} }]` format to avoid "Code doesn't return items properly"
- **Modern Parameter Structure**: Use `code` parameter, not deprecated `jsCode`
- **Node Reference Syntax**: Use `$('NodeName')` not deprecated `$node['NodeName']`
- **Field Name Consistency**: #1 cause of workflow failures
- **Progressive Testing**: Individual nodes ‚Üí connections ‚Üí end-to-end
- **Complete HTTP Configuration**: Method, headers, parameters
- **Comprehensive Error Handling**: Graceful degradation patterns
- **Visual vs Structural Diagnosis**: Distinguish UI display issues from actual problems

### **Established Pattern: Comprehensive Testing Framework (January 2025)**
When users report workflow issues (especially "unlinked nodes"):

**Immediate Response Protocol:**
```bash
# 1. FIRST: Run automated testing validation
node scripts/test-workflow-execution.js

# 2. Analyze results systematically
# ‚úÖ Expected for healthy workflow:
#    - All connections valid (0 issues)
#    - Proper execution flow traced
#    - AI service integration working

# 3. Educate user on findings
# If 0 connection issues found:
#    - Explain visual vs structural distinction
#    - Reassure workflow functionality intact
#    - Provide simple solutions (refresh/re-import)
```

**Testing Script Requirements:**
- **Node Structure Analysis**: Map all nodes with types and IDs
- **Connection Validation**: Verify node ID references (not names)
- **Execution Flow Tracing**: Complete path from trigger to completion
- **AI Service Integration**: Test all localhost:3000 endpoints
- **Clear Reporting**: Distinguish visual from structural issues

**Demo Framework Pattern:**
```bash
# Comprehensive feature demonstration
./scripts/demo-ai-workflow.sh

# Expected capabilities:
# - Service status verification
# - Error analysis demonstrations (rate limiting, auth, data processing)
# - Feature showcase with real examples
# - Integration point validation
# - Comprehensive status reporting
```

### **User Education Strategies:**
**For Visual Linking Issues:**
- **Immediate Reassurance**: "The workflow structure is completely valid"
- **Clear Explanation**: "This appears to be a visual display issue in n8n UI"
- **Simple Solutions**: "Refresh workflow or re-import JSON"
- **Technical Validation**: "Our testing confirms 0 actual connection issues"
- **Confidence Building**: "All AI features are functional and ready"

### **Debugging Approach:**
```bash
# Use established 5-phase n8n debugging methodology
# Reference: .cursor/rules/n8n_workflow_debugging.mdc
# Log all findings in Task Master with:
mcp_task-master-ai_update_subtask --id=<id> --prompt="[Phase] [Finding] [Solution] [Next Steps]

CRITICAL ADDITION: Visual vs Structural Analysis
- **Automated Testing Results**: [Connection validation output]
- **Visual Issue Diagnosis**: [UI display vs JSON structure analysis]
- **User Education**: [Explanation provided to user]
- **Solution Applied**: [Refresh/re-import/other]
"
```

## **AI Agent Collaboration Patterns**

### **Session Handoff Template:**
```
## Session Summary - [Date/Time]
**Tasks Completed:** [List with Task Master IDs]
**Current Status:** [Working on Task #X]
**Key Decisions:** [With reasoning]
**Patterns Established:** [New rules/approaches]
**For Next Agent:** [Specific focus area and context]
```

### **Tool Priority Order:**
1. **Task Master** (Primary) - Always use for task management
2. **Project Documentation** - Reference docs/ for context
3. **Execution Log** - Update for continuity
4. **Code Analysis** - Use codebase_search and file analysis
5. **AI Research** - Use for up-to-date information
6. **Testing Tools** - Integrate with existing framework

## **Emergency Procedures**

### **üö® CRITICAL: When n8n Workflows Fail (NEVER FORGET)**

**"Code doesn't return items properly" Error:**
1. **‚úÖ CHECK**: Code node uses `code` parameter (not `jsCode`)
2. **‚úÖ CHECK**: Return format is `[{ json: {...} }]`
3. **‚úÖ CHECK**: No deprecated `$node['name']` syntax (use `$('name')`)
4. **‚úÖ FIX**: Update parameter structure and return format
5. **‚úÖ TEST**: Run validation script to confirm fixes

**"Nodes are unlinked" Error:**
1. **‚úÖ FIRST**: Run automated testing script (`scripts/test-workflow-execution.js`)
2. **‚úÖ CHECK**: Connections use node IDs (not names) in JSON structure
3. **‚úÖ VALIDATE**: Each connection references existing node IDs
4. **‚úÖ DIAGNOSE**: Visual vs structural issue (UI display ‚â† actual connections)
5. **‚úÖ EDUCATE**: Explain to user that workflow functionality is intact

**Connection Validation Checklist:**
```javascript
// ‚úÖ MANDATORY: Always validate connections this way
const nodeMap = new Map();
workflow.nodes.forEach(node => nodeMap.set(node.id, node));

Object.entries(workflow.connections).forEach(([sourceId, connections]) => {
    const sourceNode = nodeMap.get(sourceId);
    if (!sourceNode) console.log(`‚ùå Source node missing: ${sourceId}`);
    
    connections.main?.forEach(group => {
        group.forEach(conn => {
            const targetNode = nodeMap.get(conn.node);
            if (!targetNode) console.log(`‚ùå Target node missing: ${conn.node}`);
        });
    });
});
```

### **When Context is Lost:**
1. **Task Master**: `mcp_task-master-ai_get_tasks` to understand state
2. **Execution Log**: Read recent entries for context
3. **Documentation**: Review relevant docs/ files
4. **Code Analysis**: Examine recent changes
5. **Systematic Approach**: Apply 5-phase methodology

### **When Things Break:**
1. **Immediate**: Apply n8n debugging methodology
2. **Document**: Log in Task Master with full context
3. **Fix**: Use systematic 5-phase approach
4. **Verify**: Test thoroughly before marking complete
5. **Learn**: Update rules with discovered patterns

## **Success Metrics**

### **Every Session Must Achieve:**
- [ ] **Task Progress**: Measurable advancement on assigned tasks
- [ ] **Quality Standards**: All quality gates passed
- [ ] **Knowledge Preservation**: Patterns and decisions documented
- [ ] **Continuity**: Clear handoff for next agent/session
- [ ] **Learning**: Rules updated with new discoveries

## **References (Always Available)**

- [ai_collaboration_patterns.mdc](mdc:.cursor/rules/ai_collaboration_patterns.mdc) - Complete collaboration guide
- [n8n_workflow_debugging.mdc](mdc:.cursor/rules/n8n_workflow_debugging.mdc) - n8n debugging methodology
- [taskmaster.mdc](mdc:.cursor/rules/taskmaster.mdc) - Complete Task Master reference
- [AI_AGENT_COLLABORATION_GUIDE.md](mdc:docs/AI_AGENT_COLLABORATION_GUIDE.md) - Detailed tool usage
- [N8N_WORKFLOW_DEBUGGING.md](mdc:docs/N8N_WORKFLOW_DEBUGGING.md) - Complete debugging guide
- [Execution Log for AI helper.txt](mdc:Execution Log for AI helper.txt) - Project evolution history

---

**REMEMBER**: Every action should advance the project toward Phase 2 completion while maintaining the systematic approach and quality standards that make this project a model for AI-human collaboration.
